{
    "$defs": {
        "AbsoluteTimingConstraint": {
            "additionalProperties": false,
            "description": "The element AbsoluteTimingConstraint is used to specify when an activity, represented by either a StudyEventGroup or StudyEvent, can take place.",
            "properties": {
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "Name": {
                    "description": "Human readable name.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier.",
                    "type": "string"
                },
                "StudyEventGroupOID": {
                    "description": "Reference to StudyEventGroup definition element.",
                    "type": "string"
                },
                "StudyEventOID": {
                    "description": "Reference to StudyEvent definition element.",
                    "type": "string"
                },
                "TimepointPostWindow": {
                    "description": "Specifies the amount of time after the TimepointTarget that the activity can be started.",
                    "type": "string"
                },
                "TimepointPreWindow": {
                    "description": "Specifies the amount of time before the TimepointTarget that the activity may be started.",
                    "type": "string"
                },
                "TimepointTarget": {
                    "anyOf": [
                        {
                            "format": "date",
                            "type": "string"
                        },
                        {
                            "format": "time",
                            "type": "string"
                        },
                        {
                            "format": "date-time",
                            "type": "string"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Specifies the targetted date, time, or datetime.",
                    "type": "string"
                }
            },
            "required": [
                "OID",
                "Name",
                "TimepointTarget"
            ],
            "title": "AbsoluteTimingConstraint",
            "type": "object"
        },
        "Address": {
            "additionalProperties": false,
            "description": "The postal address for a user, location, or organization.",
            "properties": {
                "CityRef": {
                    "$ref": "#/$defs/City",
                    "description": "City reference: The city name part of a user's postal address."
                },
                "CountryRef": {
                    "$ref": "#/$defs/Country",
                    "description": "Country reference: The country name part of a user's postal address. For CDISC SDTM or trial registry applications, this must be represented by an ISO 3166 3-letter or US-GENC country code (e.g., FRA for France, JPN for Japan)."
                },
                "GeoPositionRef": {
                    "$ref": "#/$defs/GeoPosition",
                    "description": "GeoPosition reference: The geographical position using the World Geodetic System WGS84."
                },
                "HouseNumberRef": {
                    "$ref": "#/$defs/HouseNumber",
                    "description": "HouseNumber reference: The house number part of a user's postal address."
                },
                "OtherTextRef": {
                    "$ref": "#/$defs/OtherText",
                    "description": "OtherText reference: Any other text needed as part of a user's postal address."
                },
                "PostalCodeRef": {
                    "$ref": "#/$defs/PostalCode",
                    "description": "PostalCode reference: The postal code part of a user's postal address."
                },
                "StateProvRef": {
                    "$ref": "#/$defs/StateProv",
                    "description": "StateProv reference: The state or province name part of a user's postal address."
                },
                "StreetNameRef": {
                    "$ref": "#/$defs/StreetName",
                    "description": "StreetName reference: The street name part of a user's postal address."
                }
            },
            "title": "Address",
            "type": "object"
        },
        "AdminData": {
            "additionalProperties": false,
            "description": "Administrative information about users, locations, organizations, and electronic signatures.",
            "properties": {
                "LocationRefRef": {
                    "description": "LocationRef reference: A reference to the user's physical location.",
                    "items": {
                        "$ref": "#/$defs/Location"
                    },
                    "type": "array"
                },
                "OrganizationRef": {
                    "description": "Organization reference: An organization can reference a parent organization. Users may be associated with an Organization. An Organization may be associated with a Location. A User, Location, or Organization may have an address.",
                    "items": {
                        "$ref": "#/$defs/Organization"
                    },
                    "type": "array"
                },
                "SignatureDefRef": {
                    "description": "SignatureDef reference: Provides Metadata for signatures included in the /ODM/ClinicalData.",
                    "items": {
                        "$ref": "#/$defs/SignatureDef"
                    },
                    "type": "array"
                },
                "StudyOID": {
                    "description": "Reference to a Study .",
                    "type": "string"
                },
                "UserRefRef": {
                    "description": "UserRef reference: None",
                    "items": {
                        "$ref": "#/$defs/User"
                    },
                    "type": "array"
                }
            },
            "title": "AdminData",
            "type": "object"
        },
        "Alias": {
            "additionalProperties": false,
            "description": "An Alias provides an additional name for an element. The Context attribute specifies the application domain in which this additional name is relevant.",
            "properties": {
                "ContextRef": {
                    "description": "Identifies applicable domain or scope of the mapping.",
                    "type": "string"
                },
                "Name": {
                    "description": "Alternate name of the parent element.",
                    "type": "string"
                }
            },
            "required": [
                "ContextRef",
                "Name"
            ],
            "title": "Alias",
            "type": "object"
        },
        "AnnotatedCRF": {
            "additionalProperties": false,
            "description": "An Annotated Case Report Form (CRF) is a Portable File Format (PDF) document that provides the mapping of data collection fields to the variables or discrete variable values contained within the datasets.",
            "properties": {
                "DocumentRefRef": {
                    "description": "Links to a def:leaf element with the location of the document.",
                    "items": {
                        "$ref": "#/$defs/DocumentRef"
                    },
                    "type": "array"
                }
            },
            "title": "AnnotatedCRF",
            "type": "object"
        },
        "Annotation": {
            "additionalProperties": false,
            "description": "A general note about clinical data. If an annotation has both a comment and flags, the flags should be related to the comment.",
            "properties": {
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "CommentRef": {
                    "$ref": "#/$defs/Comment",
                    "description": "Comment reference: A free-text (uninterpreted) comment about clinical data. The comment may have come from the sponsor or the clinical site."
                },
                "FlagRef": {
                    "description": "Flag reference: A machine-processable annotation.",
                    "items": {
                        "$ref": "#/$defs/Flag"
                    },
                    "type": "array"
                },
                "ID": {
                    "description": "Unique identifier for the leaf that is referenced.",
                    "type": "string"
                },
                "SeqNum": {
                    "description": "When more than 1 Value element exists this attribute uniquely identifies each Value and defines the order of a Value in a list of Values.",
                    "type": "integer"
                },
                "TransactionTypeRef": {
                    "$ref": "#/$defs/TransactionType",
                    "description": "Identifies the transaction type when /ODM/@FileType is Transactional and there is no child element."
                }
            },
            "required": [
                "SeqNum",
                "ID"
            ],
            "title": "Annotation",
            "type": "object"
        },
        "Arm": {
            "additionalProperties": false,
            "description": "An Arm element provides the declaration of a study arm. Arms do not have any ordering relative to one another.",
            "properties": {
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "Name": {
                    "description": "Human readable name of the study arm.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier for the Arm definition.",
                    "type": "string"
                },
                "WorkflowRefRef": {
                    "$ref": "#/$defs/WorkflowRef",
                    "description": "WorkflowRef reference: The WorkflowRef references a workflow definition"
                }
            },
            "required": [
                "OID",
                "Name"
            ],
            "title": "Arm",
            "type": "object"
        },
        "Association": {
            "additionalProperties": false,
            "description": "An association permits an annotation to be placed on an ordered pair of entities rather than on just one. The first and second KeySets identify the start and end of the annotated \"link.",
            "properties": {
                "AnnotationRef": {
                    "description": "Annotation reference: A general note about clinical data. If an annotation has both a comment and flags, the flags should be related to the comment.",
                    "type": "string"
                },
                "KeySetRef": {
                    "$ref": "#/$defs/KeySet",
                    "description": "KeySet reference: A KeySet references a single entity (e.g., a study, a subject, a study event). Only those attributes needed to specify the particular entity are required, and all others must be omitted (see Section 2.7, Clinical Data Keys)."
                },
                "MetaDataVersionOID": {
                    "description": "Reference to a MetaDataVersion element.",
                    "type": "string"
                },
                "StudyOID": {
                    "description": "Reference to an ODM Study element.",
                    "type": "string"
                }
            },
            "required": [
                "StudyOID",
                "MetaDataVersionOID"
            ],
            "title": "Association",
            "type": "object"
        },
        "AuditRecord": {
            "additionalProperties": false,
            "description": "An AuditRecord carries information pertaining to the creation, deletion, or modification of clinical data. This information includes who performed that action, and where, when, and why that action was performed.AuditRecord information describes a change to clinical data, but is not itself clinical data. The value of some clinical data can always be changed by a subsequent transaction, but history cannot be changed, only added to.",
            "properties": {
                "DateTimeStampRef": {
                    "$ref": "#/$defs/DateTimeStamp",
                    "description": "DateTimeStamp reference: None"
                },
                "EditPoint": {
                    "$ref": "#/$defs/EditPointType",
                    "description": "Identifies the phase of data processing in which update action occurred."
                },
                "LocationRefRef": {
                    "$ref": "#/$defs/LocationRef",
                    "description": "LocationRef reference: A reference to the user's physical location."
                },
                "ReasonForChangeRef": {
                    "$ref": "#/$defs/ReasonForChange",
                    "description": "ReasonForChange reference: A user-supplied reason for a data change."
                },
                "SourceIDRef": {
                    "$ref": "#/$defs/SourceID",
                    "description": "SourceID reference: Information that identifies the source of the data within an originating system."
                },
                "UsedMethod": {
                    "$ref": "#/$defs/YesOrNo",
                    "description": "Indicates that the action was made by the system rather than a data entry form user action."
                },
                "UserRefRef": {
                    "$ref": "#/$defs/UserRef",
                    "description": "UserRef reference: None"
                }
            },
            "title": "AuditRecord",
            "type": "object"
        },
        "Branching": {
            "additionalProperties": false,
            "description": "This element describes the branching in a workflow from a source (start) structural element to 2 or more target structural elements, over a Transition element.",
            "properties": {
                "DefaultTransitionRef": {
                    "description": "DefaultTransition reference: None",
                    "items": {
                        "$ref": "#/$defs/DefaultTransition"
                    },
                    "type": "array"
                },
                "Name": {
                    "description": "General observation Sub Class.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier of the version within the XML document.",
                    "type": "string"
                },
                "TargetTransitionRef": {
                    "description": "TargetTransition reference: Provides a reference to a Transition element.",
                    "items": {
                        "$ref": "#/$defs/TargetTransition"
                    },
                    "type": "array"
                },
                "Type": {
                    "$ref": "#/$defs/BranchingType",
                    "description": "Type of page for page references indicated in the PageRefs attribute."
                }
            },
            "required": [
                "OID",
                "Name",
                "Type"
            ],
            "title": "Branching",
            "type": "object"
        },
        "BranchingType": {
            "description": "Enumeration used in Type",
            "enum": [
                "Exclusive",
                "Parallel"
            ],
            "title": "BranchingType",
            "type": "string"
        },
        "CDISCNotes": {
            "additionalProperties": false,
            "description": "Explanatory text for the variable.",
            "properties": {
                "TranslatedTextRef": {
                    "description": "TranslatedText reference: Human-readable text that is appropriate for a particular language. TranslatedText elements typically occur in a series, presenting a set of alternative textual renditions for different languages and types.",
                    "items": {
                        "$ref": "#/$defs/TranslatedText"
                    },
                    "type": "array"
                }
            },
            "title": "CDISCNotes",
            "type": "object"
        },
        "CLDataType": {
            "description": "Enumeration used in DataTypeRef",
            "enum": [
                "integer",
                "decimal",
                "text",
                "string"
            ],
            "title": "CLDataType",
            "type": "string"
        },
        "CRFCompletionInstructions": {
            "additionalProperties": false,
            "description": "Instructions for the clinical site on how to enter collected information on the CRF.",
            "properties": {
                "TranslatedTextRef": {
                    "description": "TranslatedText reference: Human-readable text that is appropriate for a particular language. TranslatedText elements typically occur in a series, presenting a set of alternative textual renditions for different languages and types.",
                    "items": {
                        "$ref": "#/$defs/TranslatedText"
                    },
                    "type": "array"
                }
            },
            "title": "CRFCompletionInstructions",
            "type": "object"
        },
        "CheckValue": {
            "additionalProperties": false,
            "description": "A comparison value used in a range check.",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "CheckValue",
            "type": "object"
        },
        "City": {
            "additionalProperties": false,
            "description": "The city name part of a user's postal address.",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "City",
            "type": "object"
        },
        "Class": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/ItemGroupClass",
                    "description": "Name of the Class"
                },
                "SubClassRef": {
                    "description": "SubClass reference: This element contains SubClass definitions.",
                    "items": {
                        "$ref": "#/$defs/SubClass"
                    },
                    "type": "array"
                }
            },
            "required": [
                "Name"
            ],
            "title": "Class",
            "type": "object"
        },
        "ClinicalData": {
            "additionalProperties": false,
            "description": "Clinical data for 1 or more subjects.",
            "properties": {
                "AnnotationRef": {
                    "description": "Annotation reference: A general note about clinical data. If an annotation has both a comment and flags, the flags should be related to the comment.",
                    "type": "string"
                },
                "AuditRecordRef": {
                    "$ref": "#/$defs/AuditRecord",
                    "description": "AuditRecord reference: An AuditRecord carries information pertaining to the creation, deletion, or modification of clinical data. This information includes who performed that action, and where, when, and why that action was performed.AuditRecord information describes a change to clinical data, but is not itself clinical data. The value of some clinical data can always be changed by a subsequent transaction, but history cannot be changed, only added to."
                },
                "ItemGroupDataRef": {
                    "description": "ItemGroupData reference: Clinical data corresponding to an ItemGroupRef defined in the active MetaDataVersion.",
                    "items": {
                        "$ref": "#/$defs/ItemGroupData"
                    },
                    "type": "array"
                },
                "MetaDataVersionOID": {
                    "description": "References the MetaDataVersion (within the above Study) that governs the data nested within this element. The StudyOID and MetaDataVersionOID attributes select a particular metadata version. All metadata references (OIDs) occurring within this ClinicalData element refer to definitions within the selected metadata version.",
                    "type": "string"
                },
                "QueryRef": {
                    "description": "Query reference: The Query element represents a request for clarification on a data item collected for a clinical trial, specifically a request from a sponsor or sponsor\u2019s representative to an investigator to resolve an error or inconsistency discovered during data review. Queries can be created manually by individuals such as site monitors or data managers or automatically by systems. The full text of the Query exists in the Value child element. The optional Name attribute provide the means to provide a short identifier that can be included in listing or user interfaces.",
                    "items": {
                        "$ref": "#/$defs/Query"
                    },
                    "type": "array"
                },
                "SignatureRefRef": {
                    "description": "SignatureRef reference: None",
                    "type": "string"
                },
                "StudyOID": {
                    "description": "References the Study that uses the data nested within this element.",
                    "type": "string"
                },
                "SubjectDataRef": {
                    "description": "SubjectData reference: Clinical data for a single subject.",
                    "items": {
                        "$ref": "#/$defs/SubjectData"
                    },
                    "type": "array"
                }
            },
            "required": [
                "StudyOID",
                "MetaDataVersionOID"
            ],
            "title": "ClinicalData",
            "type": "object"
        },
        "Code": {
            "additionalProperties": false,
            "description": "Contains the source code that represents a FormalExpression in a given Context. The source code must be executable, and the MethodSignature defines the input parameters and return values for the code.",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "Code",
            "type": "object"
        },
        "CodeList": {
            "additionalProperties": false,
            "description": "Defines a discrete set of permitted values for an item, or provides a reference to a codelist or dictionary maintained by an external organization via the Coding element, or a combination of both. Examples provided under Coding.",
            "properties": {
                "AliasRef": {
                    "description": "Alias reference: An Alias provides an additional name for an element. The Context attribute specifies the application domain in which this additional name is relevant.",
                    "items": {
                        "$ref": "#/$defs/Alias"
                    },
                    "type": "array"
                },
                "CodeListItemRef": {
                    "description": "CodeListItem reference: Defines an individual member value of a codelist. It may include a display value in the child Decode element",
                    "items": {
                        "$ref": "#/$defs/CodeListItem"
                    },
                    "type": "array"
                },
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "CommentOID": {
                    "description": "Reference to a CommentDef Element.",
                    "type": "string"
                },
                "DataTypeRef": {
                    "$ref": "#/$defs/CLDataType",
                    "description": "Specifies the DataType for codes defined in this codelist."
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "IsNonStandard": {
                    "$ref": "#/$defs/YesOnly",
                    "description": "Used when the controlled terminology includes a set of EnumeratedItem or CodeListItem elements as defined by the sponsor."
                },
                "Name": {
                    "description": "Human readable name for the Codelist.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier for the Codelist element.",
                    "type": "string"
                },
                "StandardOID": {
                    "description": "Reference to a Standard element.",
                    "type": "string"
                }
            },
            "required": [
                "OID",
                "Name",
                "DataTypeRef"
            ],
            "title": "CodeList",
            "type": "object"
        },
        "CodeListItem": {
            "additionalProperties": false,
            "description": "Defines an individual member value of a codelist. It may include a display value in the child Decode element",
            "properties": {
                "AliasRef": {
                    "description": "Alias reference: An Alias provides an additional name for an element. The Context attribute specifies the application domain in which this additional name is relevant.",
                    "items": {
                        "$ref": "#/$defs/Alias"
                    },
                    "type": "array"
                },
                "CodedValue": {
                    "description": "Value of the codelist item (as it would occur in clinical data).",
                    "type": "string"
                },
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "CommentOID": {
                    "description": "Reference to a CommentDef .",
                    "type": "string"
                },
                "DecodeRef": {
                    "$ref": "#/$defs/Decode",
                    "description": "Decode reference: The displayed value relating to the CodeListItem/@CodedValue. This is often a label corresponding to a short name or alpha-numeric code. The actual Decode text is provided in a TranslatedText element so that it can be provided in different languages on a case report form or tabular data summary."
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "ExtendedValue": {
                    "$ref": "#/$defs/YesOnly"
                },
                "OrderNumber": {
                    "description": "Ordering on the CodeListItems (within a containing CodeListItem) for use whenever a list of Items is presented to a user. The ordering does not imply anything about event scheduling, time ordering, or data correctness.",
                    "type": "integer"
                },
                "Other": {
                    "$ref": "#/$defs/YesOnly",
                    "description": "Flag to indicate that the term represents \"other\" content."
                },
                "Rank": {
                    "description": "Numeric significance of the CodeListItem relative to others in the CodeList. The Rank attribute may be used where the relative value corresponding to an enumeration cannot or should not be determined by its lexical order. For example, if you have a list of enumerated text values including \"Low\", \"Medium\", and \"High\" and wish to assign these relative numeric values 1, 2, and 3 respectively, you should include a Rank attribute for each CodeListItem defined. Without the applied rank attribute, the normal lexical ordering would be \"High\", \"Low\", and \"Medium\".",
                    "type": "number"
                }
            },
            "required": [
                "CodedValue"
            ],
            "title": "CodeListItem",
            "type": "object"
        },
        "CodeListRef": {
            "additionalProperties": false,
            "description": "A reference to a CodeList definition.",
            "properties": {
                "CodeListOID": {
                    "description": "Reference to the CodeList definition that provides the allowable values for ItemData that references the ItemDef.",
                    "type": "string"
                }
            },
            "required": [
                "CodeListOID"
            ],
            "title": "CodeListRef",
            "type": "object"
        },
        "Coding": {
            "additionalProperties": false,
            "description": "Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
            "properties": {
                "CodeRef": {
                    "description": "A string pattern that identifies a concept as defined by the code system.",
                    "type": "string"
                },
                "CommentOID": {
                    "description": "Reference to a CommentDef that provides the rationale for the use of the Concept .",
                    "type": "string"
                },
                "Label": {
                    "description": "Used to link the value to a named MethodDef parameter.",
                    "type": "string"
                },
                "System": {
                    "description": "Identifies the code system that defines the code. If the code is taken from a code system resource then the URL for the code system should be used.",
                    "type": "string"
                },
                "SystemName": {
                    "description": "Human readable name for the code system.",
                    "type": "string"
                },
                "SystemVersion": {
                    "description": "Identifies the version of the code system",
                    "type": "string"
                },
                "href": {
                    "description": "URI reference to the Code definition.",
                    "type": "string"
                },
                "ref": {
                    "description": "Reference to a local instance of the code system.",
                    "type": "string"
                }
            },
            "required": [
                "System"
            ],
            "title": "Coding",
            "type": "object"
        },
        "Comment": {
            "additionalProperties": false,
            "description": "A free-text (uninterpreted) comment about clinical data. The comment may have come from the sponsor or the clinical site.",
            "properties": {
                "SponsorOrSite": {
                    "$ref": "#/$defs/CommentType",
                    "description": "Source of the comment."
                },
                "TranslatedTextRef": {
                    "description": "TranslatedText reference: Human-readable text that is appropriate for a particular language. TranslatedText elements typically occur in a series, presenting a set of alternative textual renditions for different languages and types.",
                    "items": {
                        "$ref": "#/$defs/TranslatedText"
                    },
                    "type": "array"
                }
            },
            "title": "Comment",
            "type": "object"
        },
        "CommentDef": {
            "additionalProperties": false,
            "description": "The Comment element allows referencing short comments self-contained in the XML document or long comments normally included in external documents. For comments included in external documents, the reference could include specific pages of a document where the comments are included.",
            "properties": {
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Text of the comment."
                },
                "DocumentRefRef": {
                    "description": "The DocumentRef element is a container for page references in a PDF file.",
                    "items": {
                        "$ref": "#/$defs/DocumentRef"
                    },
                    "type": "array"
                },
                "OID": {
                    "description": "Unique identifier.",
                    "type": "string"
                }
            },
            "required": [
                "OID"
            ],
            "title": "CommentDef",
            "type": "object"
        },
        "CommentType": {
            "description": "Enumeration used in SponsorOrSite",
            "enum": [
                "Sponsor",
                "Site"
            ],
            "title": "CommentType",
            "type": "string"
        },
        "Comparator": {
            "description": "Enumeration used in ComparatorRef",
            "enum": [
                "LT",
                "LE",
                "GT",
                "GE",
                "EQ",
                "NE",
                "IN",
                "NOTIN"
            ],
            "title": "Comparator",
            "type": "string"
        },
        "ConditionDef": {
            "additionalProperties": false,
            "description": "A ConditionDef defines a boolean condition.",
            "properties": {
                "AliasRef": {
                    "description": "Alias reference: An Alias provides an additional name for an element. The Context attribute specifies the application domain in which this additional name is relevant.",
                    "items": {
                        "$ref": "#/$defs/Alias"
                    },
                    "type": "array"
                },
                "CommentOID": {
                    "description": "Reference to a CommentDef element.",
                    "type": "string"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "FormalExpressionRef": {
                    "description": "FormalExpression reference: A FormalExpression used within a ConditionDef or a RangeCheck must evaluate to True or False. A FormalExpression referenced within a MethodDef having Type Imputation, Computation, or Transpose must evaluate to the correct DataType for an Item that may be imputed or computed using the Method. A FormalExpression gets parameter and return value definitions from the MethodSignature element. The data types in the MethodSignature parameters and return values must match the corresponding data types in the FormalExpression.",
                    "items": {
                        "$ref": "#/$defs/FormalExpression"
                    },
                    "type": "array"
                },
                "MethodSignatureRef": {
                    "$ref": "#/$defs/MethodSignature",
                    "description": "MethodSignature reference: A MethodSignature defines the parameters and return values for a method. The MethodSignature improves traceability while enhancing the ability for automation engines to execute a MethodDef's FormalExpression. Most Methods use one or more input parameters and return one or more values."
                },
                "Name": {
                    "description": "Human-readable name for the Condition.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier.",
                    "type": "string"
                }
            },
            "required": [
                "OID",
                "Name"
            ],
            "title": "ConditionDef",
            "type": "object"
        },
        "Context": {
            "description": "Enumeration used in ContextRef",
            "enum": [
                "Archive",
                "Exchange",
                "Submission"
            ],
            "title": "Context",
            "type": "string"
        },
        "Country": {
            "additionalProperties": false,
            "description": "The country name part of a user's postal address. For CDISC SDTM or trial registry applications, this must be represented by an ISO 3166 3-letter or US-GENC country code (e.g., FRA for France, JPN for Japan).",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "Country",
            "type": "object"
        },
        "Criterion": {
            "additionalProperties": false,
            "description": "The Criterion represents either an inclusion or an exclusion criterion, depending on the parent element (i.e., InclusionCriteria, ExclusionCriteria).",
            "properties": {
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "ConditionOID": {
                    "description": "Reference to a ConditionDef element.",
                    "type": "string"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "Name": {
                    "description": "Criterion name.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier.",
                    "type": "string"
                }
            },
            "required": [
                "OID",
                "Name",
                "ConditionOID"
            ],
            "title": "Criterion",
            "type": "object"
        },
        "DataType": {
            "description": "Enumeration used in DataTypeRef",
            "enum": [
                "integer",
                "decimal",
                "float",
                "double",
                "date",
                "datetime",
                "time",
                "text",
                "string",
                "URI",
                "boolean",
                "hexBinary",
                "base64Binary",
                "hexFloat",
                "base64Float",
                "partialDate",
                "partialTime",
                "partialDatetime",
                "durationDatetime",
                "intervalDatetime",
                "incompleteDatetime",
                "incompleteDate",
                "incompleteTime"
            ],
            "title": "DataType",
            "type": "string"
        },
        "DateTimeStamp": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "DateTimeStamp",
            "type": "object"
        },
        "Decode": {
            "additionalProperties": false,
            "description": "The displayed value relating to the CodeListItem/@CodedValue. This is often a label corresponding to a short name or alpha-numeric code. The actual Decode text is provided in a TranslatedText element so that it can be provided in different languages on a case report form or tabular data summary.",
            "properties": {
                "TranslatedTextRef": {
                    "description": "TranslatedText reference: Human-readable text that is appropriate for a particular language. TranslatedText elements typically occur in a series, presenting a set of alternative textual renditions for different languages and types.",
                    "items": {
                        "$ref": "#/$defs/TranslatedText"
                    },
                    "type": "array"
                }
            },
            "title": "Decode",
            "type": "object"
        },
        "DefCoreType": {
            "description": "",
            "enum": [
                "Cond",
                "Exp",
                "Perm",
                "Req"
            ],
            "title": "DefCoreType",
            "type": "string"
        },
        "DefaultTransition": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "TargetTransitionOID": {
                    "description": "Reference to the Transition that is the default target of the branching.",
                    "type": "string"
                }
            },
            "required": [
                "TargetTransitionOID"
            ],
            "title": "DefaultTransition",
            "type": "object"
        },
        "Definition": {
            "additionalProperties": false,
            "description": "Definition of the item.",
            "properties": {
                "TranslatedTextRef": {
                    "description": "TranslatedText reference: Human-readable text that is appropriate for a particular language. TranslatedText elements typically occur in a series, presenting a set of alternative textual renditions for different languages and types.",
                    "items": {
                        "$ref": "#/$defs/TranslatedText"
                    },
                    "type": "array"
                }
            },
            "title": "Definition",
            "type": "object"
        },
        "Description": {
            "additionalProperties": false,
            "description": "A free-text description of the containing metadata component, unless restricted by Business Rules.",
            "properties": {
                "TranslatedTextRef": {
                    "description": "TranslatedText reference: Human-readable text that is appropriate for a particular language. TranslatedText elements typically occur in a series, presenting a set of alternative textual renditions for different languages and types.",
                    "items": {
                        "$ref": "#/$defs/TranslatedText"
                    },
                    "type": "array"
                }
            },
            "title": "Description",
            "type": "object"
        },
        "DictionaryNameTypeEnum": {
            "description": "",
            "enum": [
                "CDISC CT",
                "COSTART",
                "CTCAE",
                "D-U-N-S NUMBER",
                "ICD",
                "LOINC",
                "MED-RT",
                "MedDRA",
                "SNOMED",
                "UNII",
                "WHO ATC CLASSIFICATION SYSTEM",
                "WHOART",
                "WHODD"
            ],
            "title": "DictionaryNameTypeEnum",
            "type": "string"
        },
        "DocumentRef": {
            "additionalProperties": false,
            "description": "Links to a leaf element with the location of the document.",
            "properties": {
                "LeafID": {
                    "description": "Reference to the unique ID of the Leaf element that contains the location of a file containing a document.",
                    "type": "string"
                },
                "PDFPageRefRef": {
                    "description": "The PDFPageRef element is a container for page references in a PDF file.",
                    "items": {
                        "$ref": "#/$defs/PDFPageRef"
                    },
                    "type": "array"
                }
            },
            "required": [
                "LeafID"
            ],
            "title": "DocumentRef",
            "type": "object"
        },
        "DurationTimingConstraint": {
            "additionalProperties": false,
            "description": "The DurationTimingConstraint constrains the duration of an activity represented by a study, epoch, StudyEventGroupDef, StudyEventDef, ItemGroupDef, or ItemDef. It is used to constrain the duration of the visit, activity, or any other structural element.",
            "properties": {
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "DurationPostWindow": {
                    "description": "Defines the amount of time by which the targetted duration may be increased.",
                    "type": "string"
                },
                "DurationPreWindow": {
                    "description": "Defines the amount of time by which the targetted duration may be reduced.",
                    "type": "string"
                },
                "DurationTarget": {
                    "description": "Constrains the duration of an activity represented by a Study, Epoch, StudyEventGroupDef, StudyEventDef, ItemGroupDef or ItemDef. Specifies the planned duration of the referenced structural element.",
                    "type": "string"
                },
                "Name": {
                    "description": "Human readable name for the DurationTimingConstraint.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier.",
                    "type": "string"
                },
                "StructuralElementOID": {
                    "description": "OID of a structural element such as a Study, Epoch, StudyEventGroup, StudyEvent, ItemGroup, Item",
                    "type": "string"
                }
            },
            "required": [
                "OID",
                "Name",
                "StructuralElementOID",
                "DurationTarget"
            ],
            "title": "DurationTimingConstraint",
            "type": "object"
        },
        "EditPointType": {
            "description": "Enumeration used in EditPoint",
            "enum": [
                "Monitoring",
                "DataManagement",
                "DBAudit"
            ],
            "title": "EditPointType",
            "type": "string"
        },
        "EntryCriteria": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "CriterionRef": {
                    "description": "Criterion reference: The Criterion represents either an inclusion or an exclusion criterion, depending on the parent element (i.e., InclusionCriteria, ExclusionCriteria).",
                    "items": {
                        "$ref": "#/$defs/Criterion"
                    },
                    "type": "array"
                }
            },
            "title": "EntryCriteria",
            "type": "object"
        },
        "Epoch": {
            "additionalProperties": false,
            "description": "The planned period of subjects' participation in the trial is divided into sequential epochs. Each epoch is a period of time that serves a purpose in the trial as a whole. Epochs cannot overlap. The sequence of the epoch in the study is provided by the SequenceNumber attribute, the first epoch in the study being assigned the sequence number 1. Sequence numbers are subsequent.",
            "properties": {
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "Name": {
                    "description": "Human readable name of the study epoch.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier for the Epoch.",
                    "type": "string"
                },
                "SequenceNumber": {
                    "description": "Order of the Epoch",
                    "type": "integer"
                }
            },
            "required": [
                "OID",
                "Name",
                "SequenceNumber"
            ],
            "title": "Epoch",
            "type": "object"
        },
        "ErrorMessage": {
            "additionalProperties": false,
            "description": "Error message provided to user when the range check fails.",
            "properties": {
                "TranslatedTextRef": {
                    "description": "TranslatedText reference: Human-readable text that is appropriate for a particular language. TranslatedText elements typically occur in a series, presenting a set of alternative textual renditions for different languages and types.",
                    "items": {
                        "$ref": "#/$defs/TranslatedText"
                    },
                    "type": "array"
                }
            },
            "title": "ErrorMessage",
            "type": "object"
        },
        "EventType": {
            "description": "Enumeration used in Type",
            "enum": [
                "Scheduled",
                "Unscheduled",
                "Common"
            ],
            "title": "EventType",
            "type": "string"
        },
        "ExceptionEvent": {
            "additionalProperties": false,
            "description": "An ExceptionEvent describes an event that occurs suddenly in a study and that was not planned as part of the normal workflow of the study. Examples are adverse events, death of a subject not caused by an adverse event, etc.",
            "properties": {
                "ConditionOID": {
                    "description": "Reference to a ConditionDef defining the condition under which the transition must be executed",
                    "type": "string"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "Name": {
                    "description": "General observation Sub Class.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier of the version within the XML document.",
                    "type": "string"
                },
                "StudyEventGroupRefRef": {
                    "$ref": "#/$defs/StudyEventGroupRef",
                    "description": "StudyEventGroupRef reference: This element references a StudyEventGroupDef as it occurs within a specific version of a study. The list of StudyEventGroupRefs identifies the types of study group events that are allowed to occur within the study."
                },
                "StudyEventRefRef": {
                    "$ref": "#/$defs/StudyEventRef",
                    "description": "StudyEventRef reference: This element references a StudyEventDef as it occurs within a specific version of a study. The list of StudyEventRefs identifies the types of study events that are allowed to occur within the study."
                },
                "WorkflowRefRef": {
                    "$ref": "#/$defs/WorkflowRef",
                    "description": "WorkflowRef reference: The WorkflowRef references a workflow definition"
                }
            },
            "required": [
                "OID",
                "Name",
                "WorkflowRefRef",
                "StudyEventGroupRefRef",
                "StudyEventRefRef"
            ],
            "title": "ExceptionEvent",
            "type": "object"
        },
        "ExclusionCriteria": {
            "additionalProperties": false,
            "description": "The ExclusionCriteria is a container element for Criterion elements describing exclusion criteria for subjects in the study. When a list is provided, not meeting any of the criteria in the list may lead to exclusion of enrollment in the study.",
            "properties": {
                "CriterionRef": {
                    "description": "Criterion reference: The Criterion represents either an inclusion or an exclusion criterion, depending on the parent element (i.e., InclusionCriteria, ExclusionCriteria).",
                    "items": {
                        "$ref": "#/$defs/Criterion"
                    },
                    "type": "array"
                }
            },
            "title": "ExclusionCriteria",
            "type": "object"
        },
        "ExitCriteria": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "CriterionRef": {
                    "description": "Criterion reference: The Criterion represents either an inclusion or an exclusion criterion, depending on the parent element (i.e., InclusionCriteria, ExclusionCriteria).",
                    "items": {
                        "$ref": "#/$defs/Criterion"
                    },
                    "type": "array"
                }
            },
            "title": "ExitCriteria",
            "type": "object"
        },
        "ExternalCodeLib": {
            "additionalProperties": false,
            "description": "The ExternalCodeLib element references a FormalExpression in an external code library, such as a file or GitHub. The intention is to make it possible to reference existing code libraries where the code is maintained as well as making it simpler to include longer, more complex FormalExpressions. The Library attribute provides the name of the external library, whereas ref or href provides a reference to the repository that can be used to retrieve the code. The Method attribute provides the name of the method in the file referenced for cases where multiple methods are provided in the source code file. The Version element provides the version of the external FormalExpression code referenced.",
            "properties": {
                "Library": {
                    "description": "The name of the external library containing the FormalExpression.",
                    "type": "string"
                },
                "Method": {
                    "description": "The name of the method or function that contains the FormalExpression code.",
                    "type": "string"
                },
                "Version": {
                    "description": "The version of the code contained in the external library.",
                    "type": "string"
                },
                "href": {
                    "description": "URL of an external code external library such as GitHub or Bitbucket.",
                    "type": "string"
                },
                "ref": {
                    "description": "Reference to a local instance (e.g. file) of the external library containing the FormalExpression code.",
                    "type": "string"
                }
            },
            "required": [
                "Library"
            ],
            "title": "ExternalCodeLib",
            "type": "object"
        },
        "FamilyName": {
            "additionalProperties": false,
            "description": "The user's surname (family name).",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "FamilyName",
            "type": "object"
        },
        "FileType": {
            "description": "Enumeration used in FileTypeRef",
            "enum": [
                "Snapshot",
                "Transactional"
            ],
            "title": "FileType",
            "type": "string"
        },
        "Flag": {
            "additionalProperties": false,
            "description": "A machine-processable annotation.",
            "properties": {
                "FlagTypeRef": {
                    "$ref": "#/$defs/FlagType",
                    "description": "FlagType reference: The type of flag. This determines the purpose and semantics of the flag."
                },
                "FlagValueRef": {
                    "$ref": "#/$defs/FlagValue",
                    "description": "FlagValue reference: The value of the flag. The meaning of this value is typically dependent on the associated FlagType. The actual value must be a member of the referenced CodeList"
                }
            },
            "title": "Flag",
            "type": "object"
        },
        "FlagType": {
            "additionalProperties": false,
            "description": "The type of flag. This determines the purpose and semantics of the flag.",
            "properties": {
                "CodeListOID": {
                    "description": "Reference to the CodeList definition.",
                    "type": "string"
                },
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "required": [
                "CodeListOID"
            ],
            "title": "FlagType",
            "type": "object"
        },
        "FlagValue": {
            "additionalProperties": false,
            "description": "The value of the flag. The meaning of this value is typically dependent on the associated FlagType. The actual value must be a member of the referenced CodeList",
            "properties": {
                "CodeListOID": {
                    "description": "Reference to the CodeList definition.",
                    "type": "string"
                },
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "required": [
                "CodeListOID"
            ],
            "title": "FlagValue",
            "type": "object"
        },
        "FormalExpression": {
            "additionalProperties": false,
            "description": "A FormalExpression used within a ConditionDef or a RangeCheck must evaluate to True or False. A FormalExpression referenced within a MethodDef having Type Imputation, Computation, or Transpose must evaluate to the correct DataType for an Item that may be imputed or computed using the Method. A FormalExpression gets parameter and return value definitions from the MethodSignature element. The data types in the MethodSignature parameters and return values must match the corresponding data types in the FormalExpression.",
            "properties": {
                "CodeRef": {
                    "$ref": "#/$defs/Code",
                    "description": "A string pattern that identifies a concept as defined by the code system."
                },
                "ContextRef": {
                    "description": "A free-form qualifier to suggest an appropriate computer language to be used when evaluating the FormalExpression content.",
                    "type": "string"
                },
                "ExternalCodeLibRef": {
                    "$ref": "#/$defs/ExternalCodeLib",
                    "description": "ExternalCodeLib reference: The ExternalCodeLib element references a FormalExpression in an external code library, such as a file or GitHub. The intention is to make it possible to reference existing code libraries where the code is maintained as well as making it simpler to include longer, more complex FormalExpressions. The Library attribute provides the name of the external library, whereas ref or href provides a reference to the repository that can be used to retrieve the code. The Method attribute provides the name of the method in the file referenced for cases where multiple methods are provided in the source code file. The Version element provides the version of the external FormalExpression code referenced."
                }
            },
            "title": "FormalExpression",
            "type": "object"
        },
        "FullName": {
            "additionalProperties": false,
            "description": "The user's full formal name. May be a combination of Prefix, GivenName, FamilyName & Suffix. Intended to be used for display.",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "FullName",
            "type": "object"
        },
        "GeoPosition": {
            "additionalProperties": false,
            "description": "The geographical position using the World Geodetic System WGS84.",
            "properties": {
                "Altitude": {
                    "description": "Height above sea level in meters.",
                    "type": "number"
                },
                "Latitude": {
                    "description": "Latitude component of geoposition coordinate in decimal degrees degrees. May require conversion from degrees, minutes, seconds format.",
                    "type": "number"
                },
                "Longitude": {
                    "description": "Longitude component of geoposition coordinates in decimal degrees. May require conversion from degrees, minutes, seconds format.",
                    "type": "number"
                }
            },
            "title": "GeoPosition",
            "type": "object"
        },
        "GivenName": {
            "additionalProperties": false,
            "description": "The user's initial given name or all given names.",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "GivenName",
            "type": "object"
        },
        "Granularity": {
            "description": "Enumeration used in GranularityRef",
            "enum": [
                "All",
                "Metadata",
                "AdminData",
                "ReferenceData",
                "AllClinicalData",
                "SingleSite",
                "SingleSubject"
            ],
            "title": "Granularity",
            "type": "string"
        },
        "HouseNumber": {
            "additionalProperties": false,
            "description": "The house number part of a user's postal address.",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "HouseNumber",
            "type": "object"
        },
        "Image": {
            "additionalProperties": false,
            "description": "A visual depiction of the user.",
            "properties": {
                "ImageFileName": {
                    "description": "The file name of or file path to the picture",
                    "type": "string"
                },
                "MimeType": {
                    "description": "Media type of the image",
                    "type": "string"
                },
                "href": {
                    "description": "URL of the location of the picture",
                    "type": "string"
                }
            },
            "title": "Image",
            "type": "object"
        },
        "ImplementationNotes": {
            "additionalProperties": false,
            "description": "Further information, such as rationale and implementation instructions, on how to implement the CRF data collection fields.",
            "properties": {
                "TranslatedTextRef": {
                    "description": "TranslatedText reference: Human-readable text that is appropriate for a particular language. TranslatedText elements typically occur in a series, presenting a set of alternative textual renditions for different languages and types.",
                    "items": {
                        "$ref": "#/$defs/TranslatedText"
                    },
                    "type": "array"
                }
            },
            "title": "ImplementationNotes",
            "type": "object"
        },
        "Include": {
            "additionalProperties": false,
            "description": "The Include metadata element allows a reference to a prior metadata version.",
            "properties": {
                "MetaDataVersionOID": {
                    "description": "References a prior MetaDataVersion within the Study referenced by the StudyOID attribute.",
                    "type": "string"
                },
                "StudyOID": {
                    "description": "References the Study that provides a prior metadata version. This attribute allows an Include element to reference a metadata version in another study. Thus, it is possible for many studies to share a set of common metadata definitions",
                    "type": "string"
                },
                "href": {
                    "description": "Reference to the location where the to be included Study-Metadata definition can be accessed. The href attribute allows to provide the location (as a URL) of the ODM where the to-be-included elements can be retrieved, in the case that the combination of the referenced study and metadataversion is not present in the same file. The reference can be to a file (e.g., \"file:///d:/MyStudies/MyStudy/PriorVersionODM.xml\") or be an API call (e.g., \" https://www.MyCompany.com/MyStudies?StudyOID=MyStudy&MetaDataVersionOID=MV.001 \").",
                    "type": "string"
                }
            },
            "required": [
                "StudyOID",
                "MetaDataVersionOID"
            ],
            "title": "Include",
            "type": "object"
        },
        "InclusionCriteria": {
            "additionalProperties": false,
            "description": "The InclusionCriteria is a container element for Criterion elements describing inclusion criteria for subjects in the study. When a list is provided, subjects must meet each of the criteria in the list in order to enroll in the study.",
            "properties": {
                "CriterionRef": {
                    "description": "Criterion reference: The Criterion represents either an inclusion or an exclusion criterion, depending on the parent element (i.e., InclusionCriteria, ExclusionCriteria).",
                    "items": {
                        "$ref": "#/$defs/Criterion"
                    },
                    "type": "array"
                }
            },
            "title": "InclusionCriteria",
            "type": "object"
        },
        "InclusionExclusionCriteria": {
            "additionalProperties": false,
            "description": "The InclusionExclusionCriteria element can contain 2 lists of Criterion elements, represented by the 2 elements InclusionCriteria and ExclusionCriteria. Together, these criteria determine the eligibility of a subject for the study. The actual condition to be evaluated is contained in an ODM ConditionDef, which is referenced by each Criterion\u201fs ConditionOID attribute.",
            "properties": {
                "ExclusionCriteriaRef": {
                    "$ref": "#/$defs/ExclusionCriteria",
                    "description": "ExclusionCriteria reference: The ExclusionCriteria is a container element for Criterion elements describing exclusion criteria for subjects in the study. When a list is provided, not meeting any of the criteria in the list may lead to exclusion of enrollment in the study."
                },
                "InclusionCriteriaRef": {
                    "$ref": "#/$defs/InclusionCriteria",
                    "description": "InclusionCriteria reference: The InclusionCriteria is a container element for Criterion elements describing inclusion criteria for subjects in the study. When a list is provided, subjects must meet each of the criteria in the list in order to enroll in the study."
                }
            },
            "title": "InclusionExclusionCriteria",
            "type": "object"
        },
        "IntercurrentEvent": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                }
            },
            "title": "IntercurrentEvent",
            "type": "object"
        },
        "InvestigatorRef": {
            "additionalProperties": false,
            "description": "Provides a reference to the user who created the SubjectData record in the source system.",
            "properties": {
                "UserOID": {
                    "description": "Reference to a User definition.",
                    "type": "string"
                }
            },
            "required": [
                "UserOID"
            ],
            "title": "InvestigatorRef",
            "type": "object"
        },
        "ItemData": {
            "additionalProperties": false,
            "description": "The ItemData element is used for transmission of the clinical data for an item. The model does not support repeating items within a single item group.",
            "properties": {
                "AnnotationRef": {
                    "description": "Annotation reference: A general note about clinical data. If an annotation has both a comment and flags, the flags should be related to the comment.",
                    "type": "string"
                },
                "AuditRecordRef": {
                    "$ref": "#/$defs/AuditRecord",
                    "description": "AuditRecord reference: An AuditRecord carries information pertaining to the creation, deletion, or modification of clinical data. This information includes who performed that action, and where, when, and why that action was performed.AuditRecord information describes a change to clinical data, but is not itself clinical data. The value of some clinical data can always be changed by a subsequent transaction, but history cannot be changed, only added to."
                },
                "IsNull": {
                    "$ref": "#/$defs/YesOnly",
                    "description": "Flag specifying that an item's value is to be set to null. In the interest of creating non-verbose XML instances, one should not use ItemData elements with IsNull set to \"Yes\" to indicate uncollected data. The better practice is to transmit only collected data. For use cases where data traceability is important, providing ItemData elements with IsNull=\"Yes\" maybe be useful. It is not necessary to provide an ItemData element with IsNull set to \"Yes\" in cases where the source system would not create a record."
                },
                "ItemOID": {
                    "description": "Reference to an ItemDef in the MetaDataVersion identified in the ClinicalData element. The referenced ItemDef defines the DataType of this item. The ItemOID attribute is used to identify a particular item definition. This value uniquely identifies an Item within the containing ItemGroup.",
                    "type": "string"
                },
                "QueryRef": {
                    "description": "Query reference: The Query element represents a request for clarification on a data item collected for a clinical trial, specifically a request from a sponsor or sponsor\u2019s representative to an investigator to resolve an error or inconsistency discovered during data review. Queries can be created manually by individuals such as site monitors or data managers or automatically by systems. The full text of the Query exists in the Value child element. The optional Name attribute provide the means to provide a short identifier that can be included in listing or user interfaces.",
                    "items": {
                        "$ref": "#/$defs/Query"
                    },
                    "type": "array"
                },
                "SignatureRefRef": {
                    "description": "SignatureRef reference: None",
                    "type": "string"
                },
                "TransactionTypeRef": {
                    "$ref": "#/$defs/TransactionType",
                    "description": "Records the TransactionType for this ItemData instance in the source system."
                },
                "ValueRef": {
                    "description": "Human-readable designation of the trial phase.",
                    "items": {
                        "$ref": "#/$defs/Value"
                    },
                    "type": "array"
                }
            },
            "required": [
                "ItemOID"
            ],
            "title": "ItemData",
            "type": "object"
        },
        "ItemDef": {
            "additionalProperties": false,
            "description": "An ItemDef describes a type of item that can occur within a study. Item properties include name, datatype, range, or codelist restrictions, and several other properties.",
            "properties": {
                "AliasRef": {
                    "description": "Alias reference: An Alias provides an additional name for an element. The Context attribute specifies the application domain in which this additional name is relevant.",
                    "items": {
                        "$ref": "#/$defs/Alias"
                    },
                    "type": "array"
                },
                "CDISCNotesRef": {
                    "$ref": "#/$defs/CDISCNotes",
                    "description": "CDISCNotes reference: Explanatory text for the variable."
                },
                "CRFCompletionInstructionsRef": {
                    "$ref": "#/$defs/CRFCompletionInstructions",
                    "description": "CRFCompletionInstructions reference: Instructions for the clinical site on how to enter collected information on the CRF."
                },
                "CodeListRefRef": {
                    "$ref": "#/$defs/CodeListRef",
                    "description": "CodeListRef reference: A reference to a CodeList definition."
                },
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "CommentOID": {
                    "description": "Reference to a CommentDef with sponsor provided information related to this ItemDef,",
                    "type": "string"
                },
                "DataTypeRef": {
                    "$ref": "#/$defs/DataType",
                    "description": "Specification of the allowable values and the intended use of the corresponding value elements."
                },
                "DefinitionRef": {
                    "$ref": "#/$defs/Definition",
                    "description": "A free-text definition of the parameter"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "DisplayFormat": {
                    "description": "Display format supports data visualization of numeric float and date values.",
                    "type": "string"
                },
                "ImplementationNotesRef": {
                    "$ref": "#/$defs/ImplementationNotes",
                    "description": "ImplementationNotes reference: Further information, such as rationale and implementation instructions, on how to implement the CRF data collection fields."
                },
                "Length": {
                    "description": "Specifies the number of characters allowed for the ItemData/Value when it is represented as a text.",
                    "type": "integer"
                },
                "Name": {
                    "description": "Human readable name for the ItemDef.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier for the ItemDef element.",
                    "type": "string"
                },
                "PromptRef": {
                    "$ref": "#/$defs/Prompt",
                    "description": "Prompt reference: A prompt text shown to a human user when prompted to provide data for an item on paper or on a screen. The Prompt is a short version of the question."
                },
                "QuestionRef": {
                    "$ref": "#/$defs/Question",
                    "description": "Question reference: A label shown to a human user when prompted to provide data for an item on paper or on a screen."
                },
                "RangeCheckRef": {
                    "description": "RangeCheck reference: A RangeCheck defines a constraint on the value of the enclosing item. It represents an expression that evaluates to True when the ItemData value is valid or False when the ItemData value is invalid. The expression is specified using either Comparator and CheckValue or using FormalExpressions.",
                    "items": {
                        "$ref": "#/$defs/RangeCheck"
                    },
                    "type": "array"
                },
                "ValueListRefRef": {
                    "$ref": "#/$defs/ValueListRef",
                    "description": "ValueListRef reference: The ValueListRef element is the OID of the ValueListDef that contains the valuelist definition associated with the variable. If value-level metadata is required for a variable, a ValueListRef element should be provided as a child element on the ItemDef for the variable definition."
                },
                "VariableSet": {
                    "description": "ADaM variable set, e.g. Dose, Analysis Parameter, Treatment Timing.",
                    "type": "string"
                }
            },
            "required": [
                "OID",
                "Name",
                "DataTypeRef"
            ],
            "title": "ItemDef",
            "type": "object"
        },
        "ItemGroupClass": {
            "description": "Enumeration used in Name",
            "enum": [
                "ADAM OTHER",
                "BASIC DATA STRUCTURE",
                "DEVICE LEVEL ANALYSIS DATASET",
                "EVENTS",
                "FINDINGS",
                "FINDINGS ABOUT",
                "INTERVENTIONS",
                "MEDICAL DEVICE BASIC DATA STRUCTURE",
                "MEDICAL DEVICE OCCURRENCE DATA STRUCTURE",
                "OCCURRENCE DATA STRUCTURE",
                "RELATIONSHIP",
                "SPECIAL PURPOSE",
                "STUDY REFERENCE",
                "SUBJECT LEVEL ANALYSIS DATASET",
                "TRIAL DESIGN"
            ],
            "title": "ItemGroupClass",
            "type": "string"
        },
        "ItemGroupData": {
            "additionalProperties": false,
            "description": "Clinical data corresponding to an ItemGroupRef defined in the active MetaDataVersion.",
            "properties": {
                "AnnotationRef": {
                    "description": "Annotation reference: A general note about clinical data. If an annotation has both a comment and flags, the flags should be related to the comment.",
                    "type": "string"
                },
                "AuditRecordRef": {
                    "$ref": "#/$defs/AuditRecord",
                    "description": "AuditRecord reference: An AuditRecord carries information pertaining to the creation, deletion, or modification of clinical data. This information includes who performed that action, and where, when, and why that action was performed.AuditRecord information describes a change to clinical data, but is not itself clinical data. The value of some clinical data can always be changed by a subsequent transaction, but history cannot be changed, only added to."
                },
                "ItemDataRef": {
                    "description": "ItemData reference: The ItemData element is used for transmission of the clinical data for an item. The model does not support repeating items within a single item group.",
                    "items": {
                        "$ref": "#/$defs/ItemData"
                    },
                    "type": "array"
                },
                "ItemGroupDataRef": {
                    "description": "ItemGroupData reference: Clinical data corresponding to an ItemGroupRef defined in the active MetaDataVersion.",
                    "items": {
                        "$ref": "#/$defs/ItemGroupData"
                    },
                    "type": "array"
                },
                "ItemGroupDataSeq": {
                    "description": "Unique sequence # for each ItemGroupData child element (record) in the container element. The ItemGroupDataSeq attribute doesn\u2019t have any other meaning than the sequence in which the items are saved and exchanged for each ItemGroupDef. It is equivalent to the observation # in a dataset.",
                    "type": "integer"
                },
                "ItemGroupOID": {
                    "description": "Reference to an ItemGroupDef for the MetaDataVersion identified in the ClinicalData element.",
                    "type": "string"
                },
                "ItemGroupRepeatKey": {
                    "description": "A key used to distinguish between repeats of the same type of item group.",
                    "type": "string"
                },
                "QueryRef": {
                    "description": "Query reference: The Query element represents a request for clarification on a data item collected for a clinical trial, specifically a request from a sponsor or sponsor\u2019s representative to an investigator to resolve an error or inconsistency discovered during data review. Queries can be created manually by individuals such as site monitors or data managers or automatically by systems. The full text of the Query exists in the Value child element. The optional Name attribute provide the means to provide a short identifier that can be included in listing or user interfaces.",
                    "items": {
                        "$ref": "#/$defs/Query"
                    },
                    "type": "array"
                },
                "SignatureRefRef": {
                    "description": "SignatureRef reference: None",
                    "type": "string"
                },
                "TransactionTypeRef": {
                    "$ref": "#/$defs/TransactionType",
                    "description": "The TransactionType attribute need not be present in a Snapshot document."
                }
            },
            "required": [
                "ItemGroupOID"
            ],
            "title": "ItemGroupData",
            "type": "object"
        },
        "ItemGroupDef": {
            "additionalProperties": false,
            "description": "An ItemGroupDef describes a type of variable or field grouping that can occur within a study.",
            "properties": {
                "AliasRef": {
                    "description": "Alias reference: An Alias provides an additional name for an element. The Context attribute specifies the application domain in which this additional name is relevant.",
                    "items": {
                        "$ref": "#/$defs/Alias"
                    },
                    "type": "array"
                },
                "ArchiveLocationID": {
                    "description": "Reference to the unique ID of a leaf element that provides the actual location and file name of the data file.",
                    "type": "string"
                },
                "ClassRef": {
                    "$ref": "#/$defs/Class",
                    "description": "Class reference: None"
                },
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "CommentOID": {
                    "description": "Reference to a CommentDef with sponsor provided information related to this ItemGroupDef. It allows annotations to the ItemGroup.",
                    "type": "string"
                },
                "DatasetName": {
                    "description": "Name of a file containing the ItemGroupData for this ItemGroupDef. The name applies to the object itself rather then providing a mapping to a different object.",
                    "type": "string"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "Domain": {
                    "description": "Identifies the scope or CDISC SDTMIG/SENDIG Domain of the ItemGroup data. The domain applies to the object itself rather then providing a mapping to a different object.",
                    "type": "string"
                },
                "HasNoData": {
                    "$ref": "#/$defs/YesOnly",
                    "description": "Used to indicate that an ItemGroupDef has no data. May be used at sponsor's discretion or if required by a regulatory authority"
                },
                "IsNonStandard": {
                    "$ref": "#/$defs/YesOnly",
                    "description": "Required for ADaM, SDTM, or SEND if StandardOID is not provided."
                },
                "IsReferenceData": {
                    "$ref": "#/$defs/YesOrNo",
                    "description": "Specifies whether this ItemGroupDef is used for non-subject data."
                },
                "ItemGroupRefRef": {
                    "description": "ItemGroupRef reference: ItemGroupRef references an ItemGroupDef as it occurs within a specific StudyEventDef or ItemGroupDef. The list of ItemGroupRefs identifies the types of item groups that are allowed to occur within this type of studyevent or (nested) item group. The ItemGroupRefs within a single StudyEventDef or ItemGroupDef must not have duplicate ItemGroupOID or OrderNumber attribute values.",
                    "items": {
                        "$ref": "#/$defs/ItemGroupRef"
                    },
                    "type": "array"
                },
                "ItemRefRef": {
                    "description": "ItemRef reference: A reference to an ItemDef as it occurs within a specific ItemGroupDef. The list of ItemRefs identifies the types of items that are allowed to occur within this type of item group.",
                    "items": {
                        "$ref": "#/$defs/ItemRef"
                    },
                    "type": "array"
                },
                "LeafRef": {
                    "description": "Leaf reference: Contains the XLink information referenced by DocumentRef or ArchiveLocationID",
                    "type": "string"
                },
                "Name": {
                    "description": "Human readable name for the ItemGroupDef.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier for the ItemGroupDef element.",
                    "type": "string"
                },
                "OriginRef": {
                    "description": "Origin reference: Origin defines the source metadata, where applicable, for ODM ItemRefs or ItemGroupRefs. Origin as a child element replaces the Origin attribute in ODM v1.3 that exists for the ItemDef and ItemGroupDef elements.The Origin element is based on the def:Origin element in Define-XML v2.1 with the Trace-XML v1.0 extension.",
                    "items": {
                        "$ref": "#/$defs/Origin"
                    },
                    "type": "array"
                },
                "Purpose": {
                    "description": "Purpose of the ItemGroup.",
                    "type": "string"
                },
                "Repeating": {
                    "$ref": "#/$defs/ItemGroupRepeatingType",
                    "description": "The Repeating attribute indicates that the ItemGroup may occur repeatedly within the containing element . Simple - the ItemGroup repeats within the containing element and is not bound in any way. Note: It is equivalent to the ODM v1.3.2 case where Repeating=\"Yes\". Dynamic - ItemGroupData repeats based on values in a codelist. There may be multiple occurrences for some codelist items. Static - ItemGroupData repeats based on values in a codelist. Only one occurrence may happen for each codelist item."
                },
                "RepeatingLimit": {
                    "description": "Maximum number of repeats.",
                    "type": "integer"
                },
                "StandardOID": {
                    "description": "Reference to a Standard element.",
                    "type": "string"
                },
                "Structure": {
                    "description": "Description of the level of detail represented by individual records in the ItemGroup",
                    "type": "string"
                },
                "Type": {
                    "description": "identifies the type of data structure the ItemGroup represents. Form - a CRF for data collection. Note, ItemGroupDef Type=\"Form\" replaces the ODM v1.x FormDef element. Section - a section within a CRF. Dataset - tabulation, analysis or operational datasets. Concept - defines a biomedical concept.",
                    "type": "string"
                },
                "WorkflowRefRef": {
                    "$ref": "#/$defs/WorkflowRef",
                    "description": "WorkflowRef reference: The WorkflowRef references a workflow definition"
                }
            },
            "required": [
                "OID",
                "Name",
                "Repeating",
                "Type"
            ],
            "title": "ItemGroupDef",
            "type": "object"
        },
        "ItemGroupRef": {
            "additionalProperties": false,
            "description": "ItemGroupRef references an ItemGroupDef as it occurs within a specific StudyEventDef or ItemGroupDef. The list of ItemGroupRefs identifies the types of item groups that are allowed to occur within this type of studyevent or (nested) item group. The ItemGroupRefs within a single StudyEventDef or ItemGroupDef must not have duplicate ItemGroupOID or OrderNumber attribute values.",
            "properties": {
                "CollectionExceptionConditionOID": {
                    "description": "Reference to a ConditionDef If the CollectionExceptionConditionOID attribute is provided, the ConditionDef it references describes the circumstances under which data for this ItemGroup should not be collected.",
                    "type": "string"
                },
                "ItemGroupOID": {
                    "description": "Reference to the ItemGroupDef .",
                    "type": "string"
                },
                "Mandatory": {
                    "$ref": "#/$defs/YesOrNo",
                    "description": "The Mandatory flag indicates that the clinical data for an instance of the containing event or ItemGroup would be incomplete without an instance of this type of ItemGroup. ODM clinical data files that are incomplete in this sense may be considered incomplete for study review and analysis purposes."
                },
                "MethodOID": {
                    "description": "Reference to a MethodDef that will provide one or more data rows as output. The MethodDef is used to prepopulate items",
                    "type": "string"
                },
                "OrderNumber": {
                    "description": "Indicates the order in which this ItemGroup appears in Metadata displays or data entry applications. The OrderNumber attribute provides an ordering on the ItemGroupDefs (within StudyEventDef or ItemGroupDef) for use whenever a list of ItemGroupDefs is presented to a user. Order of execution is preferably defined in a workflow (see Section 3.2.2.1.8, WorkflowDef ) but when used without a workflow, may be used the define the order in which data entry forms are presented in an application UI.",
                    "type": "integer"
                }
            },
            "required": [
                "ItemGroupOID",
                "Mandatory"
            ],
            "title": "ItemGroupRef",
            "type": "object"
        },
        "ItemGroupRepeatingType": {
            "description": "Enumeration used in Repeating",
            "enum": [
                "No",
                "Simple",
                "Dynamic",
                "Static"
            ],
            "title": "ItemGroupRepeatingType",
            "type": "string"
        },
        "ItemGroupSubClass": {
            "description": "Enumeration used in Name",
            "enum": [
                "ADVERSE EVENT",
                "MEDICAL DEVICE TIME-TO-EVENT",
                "NON-COMPARTMENTAL ANALYSIS",
                "TIME-TO-EVENT"
            ],
            "title": "ItemGroupSubClass",
            "type": "string"
        },
        "ItemGroupTypeTypeEnum": {
            "description": "",
            "enum": [],
            "title": "ItemGroupTypeTypeEnum",
            "type": "string"
        },
        "ItemRef": {
            "additionalProperties": false,
            "description": "A reference to an ItemDef as it occurs within a specific ItemGroupDef. The list of ItemRefs identifies the types of items that are allowed to occur within this type of item group.",
            "properties": {
                "CollectionExceptionConditionOID": {
                    "description": "Reference to a ConditionDef that defines the circumstances under which collection of the Item may be omitted.",
                    "type": "string"
                },
                "Core": {
                    "description": "CDASH, ADaM, SDTM, and SEND Core designations.",
                    "type": "string"
                },
                "HasNoData": {
                    "$ref": "#/$defs/YesOnly",
                    "description": "Used to indicate that an ItemRef that represent a dataset's variable has no data. Note that variables refer to both standard and non-standard/ supplemental qualifiers variables (/ODM/Study/MetaDataVersion/ItemGroupDef/ItemRef or /ODM/Study/MetaDataVersion/ValueListDef/ItemRef)."
                },
                "IsNonStandard": {
                    "$ref": "#/$defs/YesOnly",
                    "description": "A non-standard variable is one that is not defined in the SDTMIG or the underlying SDTM model of a standard referenced within the ODM document. Permitted for any ItemRef that represents a non-standard variable in an SDTM or SEND dataset when the ODM Context attribute value is \"Other\" Is not used with an ItemRef that represents a value level metadata for an SDTMIG SUPPQUAL dataset Has no meaning for ADaM, so shall not be used for ADaM variables"
                },
                "ItemOID": {
                    "description": "Reference to the ItemDef .",
                    "type": "string"
                },
                "KeySequence": {
                    "description": "Indicates that this item is a key for the enclosing element. It also provides an ordering for the keys.",
                    "type": "integer"
                },
                "Mandatory": {
                    "$ref": "#/$defs/YesOrNo",
                    "description": "Indicator of whether this ItemGroup must appear in the study clinical data for each subject per the study protocol. The Mandatory flag indicates that the clinical data for an instance of the containing element would be incomplete without an instance of this type of item. ODM clinical data files that are incomplete in this sense may be considered incomplete for study review and analysis purposes."
                },
                "MethodOID": {
                    "description": "Reference to a MethodDef used to derive the value of this item.",
                    "type": "string"
                },
                "OrderNumber": {
                    "description": "Indicates the order in which this ItemRef appears in Metadata displays or data entry applications. The OrderNumbers provide an ordering on the Items (within a containing element) for use whenever a list of Items is presented to a user. They do not imply anything about event scheduling, time ordering, or data correctness.",
                    "type": "integer"
                },
                "OriginRef": {
                    "description": "Origin reference: Origin defines the source metadata, where applicable, for ODM ItemRefs or ItemGroupRefs. Origin as a child element replaces the Origin attribute in ODM v1.3 that exists for the ItemDef and ItemGroupDef elements.The Origin element is based on the def:Origin element in Define-XML v2.1 with the Trace-XML v1.0 extension.",
                    "items": {
                        "$ref": "#/$defs/Origin"
                    },
                    "type": "array"
                },
                "Other": {
                    "$ref": "#/$defs/YesOnly",
                    "description": "Flag to indicate that the Item represents \"other\" content added to an ItemGroup."
                },
                "PreSpecifiedValue": {
                    "description": "Prefill value or a default value for a field that is automatically populated.",
                    "type": "string"
                },
                "Repeat": {
                    "$ref": "#/$defs/YesOnly",
                    "description": "Indicates that the item serves as the item over which repeats are to be performed."
                },
                "Role": {
                    "description": "The Role for the referenced ItemDef. The Role attribute provides a single role name describing the use of this data item. If the Role is defined by a standard terminology, RoleCodeListOID may be used to reference a CodeList that defines the full set roles from which the Role attribute value is to be taken.",
                    "type": "string"
                },
                "RoleCodeListOID": {
                    "description": "Reference to a CodeList that defines the allowable values of Role for the Study.",
                    "type": "string"
                },
                "UnitsItemOID": {
                    "description": "Reference to a sibling ItemRef element that represents the unit specification for this ItemRef (defines the associated units variable).",
                    "type": "string"
                },
                "WhereClauseRefRef": {
                    "description": "WhereClauseRef reference: The WhereClauseRef references the WhereClauseDef element that describes the conditions under which the variable values are defined by the referenced ItemDef.",
                    "items": {
                        "$ref": "#/$defs/WhereClauseRef"
                    },
                    "type": "array"
                }
            },
            "required": [
                "ItemOID",
                "Mandatory"
            ],
            "title": "ItemRef",
            "type": "object"
        },
        "KeySet": {
            "additionalProperties": false,
            "description": "A KeySet references a single entity (e.g., a study, a subject, a study event). Only those attributes needed to specify the particular entity are required, and all others must be omitted (see Section 2.7, Clinical Data Keys).",
            "properties": {
                "ItemGroupOID": {
                    "description": "Reference to an ItemGroupOID attribute value for an ItemGroupData child element of this ClinicalData/SubjectData/StudyEventData element.",
                    "type": "string"
                },
                "ItemGroupRepeatKey": {
                    "description": "Reference to an ItemGroupRepeatKey attribute value for an ItemGroupData child element of this ClinicalData/SubjectData/StudyEventData element.",
                    "type": "string"
                },
                "ItemOID": {
                    "description": "Reference to an ItemOID attribute for an ItemData child element of this ClinicalData/SubjectData/StudyEventData/ItemGroupData element.",
                    "type": "string"
                },
                "MetaDataVersionOID": {
                    "description": "Reference to a MetaDataVersionOID attribute value for this ClinicalData element.",
                    "type": "string"
                },
                "StudyEventOID": {
                    "description": "Reference to a StudyEventOID attribute value for a StudyEventData child element of this ClinicalData/SubjectData element.",
                    "type": "string"
                },
                "StudyEventRepeatKey": {
                    "description": "Reference to a StudyEventRepeatKey attribute value for a StudyEventData child element of this ClinicalData/SubjectData/StudyEventData element.",
                    "type": "string"
                },
                "StudyOID": {
                    "description": "References the StudyOID in an ODM/ClinicalData element.",
                    "type": "string"
                },
                "SubjectKey": {
                    "description": "Reference to a SubjectKey attribute value for a SubjectData child element of this ClinicalData element.",
                    "type": "string"
                }
            },
            "required": [
                "StudyOID"
            ],
            "title": "KeySet",
            "type": "object"
        },
        "Leaf": {
            "additionalProperties": false,
            "description": "Contains the XLink information referenced by DocumentRef or ArchiveLocationID",
            "properties": {
                "ID": {
                    "description": "Unique ID for the Leaf. See Section 2.13, Element Identifiers and References , for OID considerations. Business Rule: Leaf ID attributes must be unique within the ODM document (i.e., there can be no 2 Leaf elements with the same ID attribute).",
                    "type": "string"
                },
                "Title": {
                    "description": "Text with the label for the document or dataset.",
                    "type": "string"
                },
                "href": {
                    "description": "URL that can be used to identify the location of a document or dataset file relative to the folder containing the ODM file. If the file is not located in the same folder as the ODM file, a relative file path should be included. Business Rule: For regulatory submissions to the FDA, the locations specified have to conform to locations allowed in the eCTD, in the Technical Conformance Guide for the relevant regulatory authority and the study data specifications.",
                    "type": "string"
                }
            },
            "required": [
                "ID",
                "href"
            ],
            "title": "Leaf",
            "type": "object"
        },
        "LegalReason": {
            "additionalProperties": false,
            "description": "The responsibility statement associated with a signature (e.g., \"The signer accepts responsibility for the accuracy of this data.\").",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "LegalReason",
            "type": "object"
        },
        "Location": {
            "additionalProperties": false,
            "description": "A physical location associated with data collection and/or treatment of subjects.",
            "properties": {
                "AddressRef": {
                    "description": "Address reference: The postal address for a user, location, or organization.",
                    "items": {
                        "$ref": "#/$defs/Address"
                    },
                    "type": "array"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "MetaDataVersionRefRef": {
                    "description": "MetaDataVersionRef reference: A reference to a MetaDataVersion used at the containing Location. The EffectiveDate reflects the possibility that the metadata may change over the course of the study.",
                    "items": {
                        "$ref": "#/$defs/MetaDataVersionRef"
                    },
                    "type": "array"
                },
                "Name": {
                    "description": "Human-readable identifier.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier",
                    "type": "string"
                },
                "OrganizationOID": {
                    "description": "Reference to an organization.",
                    "type": "string"
                },
                "QueryRef": {
                    "description": "Query reference: The Query element represents a request for clarification on a data item collected for a clinical trial, specifically a request from a sponsor or sponsor\u2019s representative to an investigator to resolve an error or inconsistency discovered during data review. Queries can be created manually by individuals such as site monitors or data managers or automatically by systems. The full text of the Query exists in the Value child element. The optional Name attribute provide the means to provide a short identifier that can be included in listing or user interfaces.",
                    "items": {
                        "$ref": "#/$defs/Query"
                    },
                    "type": "array"
                },
                "Role": {
                    "description": "Specifies the role of this location in the study.",
                    "type": "string"
                },
                "TelecomRef": {
                    "description": "Telecom reference: The telecommunication contacts points of a user, a location, or an organization. The Type attribute designates the type of contact.",
                    "items": {
                        "$ref": "#/$defs/Telecom"
                    },
                    "type": "array"
                }
            },
            "required": [
                "OID",
                "Name"
            ],
            "title": "Location",
            "type": "object"
        },
        "LocationRef": {
            "additionalProperties": false,
            "description": "A reference to the user's physical location.",
            "properties": {
                "LocationOID": {
                    "description": "Reference to a Location definition.",
                    "type": "string"
                }
            },
            "required": [
                "LocationOID"
            ],
            "title": "LocationRef",
            "type": "object"
        },
        "Meaning": {
            "additionalProperties": false,
            "description": "A short name or description for this signature. It should reflect the context of the signature and/or the text that appears when the signature is applied in the user interface.",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "Meaning",
            "type": "object"
        },
        "MetaDataVersion": {
            "additionalProperties": false,
            "description": "The metadata for a study is defined in a series of MetaDataVersion elements. Through this mechanism (multiple MetaDataVersion elements), the model supports the incremental deployment of \"mid-stream study changes,\" and thus can handle a situation where multiple versions of the metadata are being used simultaneously (e.g., due to delays in IRB approval at various sites).",
            "properties": {
                "AnnotatedCRFRef": {
                    "$ref": "#/$defs/AnnotatedCRF",
                    "description": "AnnotatedCRF reference: An Annotated Case Report Form (CRF) is a Portable File Format (PDF) document that provides the mapping of data collection fields to the variables or discrete variable values contained within the datasets."
                },
                "CodeListRefRef": {
                    "description": "CodeListRef reference: A reference to a CodeList definition.",
                    "items": {
                        "$ref": "#/$defs/CodeList"
                    },
                    "type": "array"
                },
                "CommentDefRef": {
                    "description": "CommentDef reference: The Comment element allows referencing short comments self-contained in the XML document or long comments normally included in external documents. For comments included in external documents, the reference could include specific pages of a document where the comments are included.",
                    "items": {
                        "$ref": "#/$defs/CommentDef"
                    },
                    "type": "array"
                },
                "CommentOID": {
                    "description": "Reference to a CommentDef element.",
                    "type": "string"
                },
                "ConditionDefRef": {
                    "description": "ConditionDef reference: A ConditionDef defines a boolean condition.",
                    "items": {
                        "$ref": "#/$defs/ConditionDef"
                    },
                    "type": "array"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "IncludeRef": {
                    "$ref": "#/$defs/Include",
                    "description": "Include reference: The Include metadata element allows a reference to a prior metadata version."
                },
                "ItemDefRef": {
                    "description": "ItemDef reference: An ItemDef describes a type of item that can occur within a study. Item properties include name, datatype, range, or codelist restrictions, and several other properties.",
                    "items": {
                        "$ref": "#/$defs/ItemDef"
                    },
                    "type": "array"
                },
                "ItemGroupDefRef": {
                    "description": "ItemGroupDef reference: An ItemGroupDef describes a type of variable or field grouping that can occur within a study.",
                    "items": {
                        "$ref": "#/$defs/ItemGroupDef"
                    },
                    "type": "array"
                },
                "LeafRef": {
                    "description": "Leaf reference: Contains the XLink information referenced by DocumentRef or ArchiveLocationID",
                    "items": {
                        "$ref": "#/$defs/Leaf"
                    },
                    "type": "array"
                },
                "MethodDefRef": {
                    "description": "MethodDef reference: A MethodDef defines how a data value can be obtained from a collection of other data values.",
                    "items": {
                        "$ref": "#/$defs/MethodDef"
                    },
                    "type": "array"
                },
                "Name": {
                    "description": "MetaDataVersion name.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier.",
                    "type": "string"
                },
                "ProtocolRef": {
                    "$ref": "#/$defs/Protocol",
                    "description": "Protocol reference: The Protocol element lists the kinds of study events that can occur within a specific version of a study. All clinical data must occur within one of these study events."
                },
                "StandardsRef": {
                    "$ref": "#/$defs/Standards",
                    "description": "Standards reference: The Standards element provides a container for the list of Standard elements referenced in the MetaDataVersion for the Study.."
                },
                "StudyEventDefRef": {
                    "description": "StudyEventDef reference: StudyEventDef represents the definition of an activity in a study where data is collected. For example, a study event may represent a set of item groups that represent data collection instruments to be completed for a subject during a visit in a study. The visit occurs as part of a study workflow, and the workflow is referenced in the study event.",
                    "items": {
                        "$ref": "#/$defs/StudyEventDef"
                    },
                    "type": "array"
                },
                "StudyEventGroupDefRef": {
                    "description": "StudyEventGroupDef reference: StudyEventGroupDef is a study building block that groups a number of smaller building blocks, which can themselves be StudyEventGroups or StudyEvents. It thus allows nesting of building blocks.",
                    "items": {
                        "$ref": "#/$defs/StudyEventGroupDef"
                    },
                    "type": "array"
                },
                "SupplementalDocRef": {
                    "$ref": "#/$defs/SupplementalDoc",
                    "description": "SupplementalDoc reference: Supplemental data definitions"
                },
                "ValueListDefRef": {
                    "description": "ValueListDef reference: The following table specifies the XML structure for valuelist metadata. The ValueListDef element contains ItemRef elements that reference ItemDef elements that provide the value-level metadata details",
                    "items": {
                        "$ref": "#/$defs/ValueListDef"
                    },
                    "type": "array"
                },
                "WhereClauseDefRef": {
                    "description": "WhereClauseDef reference: The WhereClauseDef element specifies a condition.",
                    "items": {
                        "$ref": "#/$defs/WhereClauseDef"
                    },
                    "type": "array"
                },
                "WorkflowDefRef": {
                    "description": "WorkflowDef reference: A WorkflowDef defines an automated workflow for a study.",
                    "items": {
                        "$ref": "#/$defs/WorkflowDef"
                    },
                    "type": "array"
                }
            },
            "required": [
                "OID",
                "Name"
            ],
            "title": "MetaDataVersion",
            "type": "object"
        },
        "MetaDataVersionRef": {
            "additionalProperties": false,
            "description": "A reference to a MetaDataVersion used at the containing Location. The EffectiveDate reflects the possibility that the metadata may change over the course of the study.",
            "properties": {
                "EffectiveDate": {
                    "description": "Datetime stamp when this MetaDataVersion was published at this location.",
                    "format": "date",
                    "type": "string"
                },
                "MetaDataVersionOID": {
                    "description": "References the MetaDataVersion (within the above Study).",
                    "type": "string"
                },
                "StudyOID": {
                    "description": "References the Study that uses this metadata version.",
                    "type": "string"
                }
            },
            "required": [
                "StudyOID",
                "MetaDataVersionOID",
                "EffectiveDate"
            ],
            "title": "MetaDataVersionRef",
            "type": "object"
        },
        "MethodDef": {
            "additionalProperties": false,
            "description": "A MethodDef defines how a data value can be obtained from a collection of other data values.",
            "properties": {
                "AliasRef": {
                    "description": "Alias reference: An Alias provides an additional name for an element. The Context attribute specifies the application domain in which this additional name is relevant.",
                    "items": {
                        "$ref": "#/$defs/Alias"
                    },
                    "type": "array"
                },
                "CommentOID": {
                    "description": "Reference to a CommentDef with information related to this MethodDef.",
                    "type": "string"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "DocumentRefRef": {
                    "description": "The DocumentRef element is a container for page references in a PDF file.",
                    "items": {
                        "$ref": "#/$defs/DocumentRef"
                    },
                    "type": "array"
                },
                "FormalExpressionRef": {
                    "description": "FormalExpression reference: A FormalExpression used within a ConditionDef or a RangeCheck must evaluate to True or False. A FormalExpression referenced within a MethodDef having Type Imputation, Computation, or Transpose must evaluate to the correct DataType for an Item that may be imputed or computed using the Method. A FormalExpression gets parameter and return value definitions from the MethodSignature element. The data types in the MethodSignature parameters and return values must match the corresponding data types in the FormalExpression.",
                    "items": {
                        "$ref": "#/$defs/FormalExpression"
                    },
                    "type": "array"
                },
                "MethodSignatureRef": {
                    "$ref": "#/$defs/MethodSignature",
                    "description": "MethodSignature reference: A MethodSignature defines the parameters and return values for a method. The MethodSignature improves traceability while enhancing the ability for automation engines to execute a MethodDef's FormalExpression. Most Methods use one or more input parameters and return one or more values."
                },
                "Name": {
                    "description": "Human readable name for the method.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifer for the MethodDef element.",
                    "type": "string"
                },
                "Type": {
                    "$ref": "#/$defs/MethodType",
                    "description": "Computation: derivation involving one or more variables. Imputation: derivation based on other observations. Transpose: conversion of rows to columns or vice versa. Preload: retrieve and populate data from an external source."
                }
            },
            "required": [
                "OID",
                "Name"
            ],
            "title": "MethodDef",
            "type": "object"
        },
        "MethodSignature": {
            "additionalProperties": false,
            "description": "A MethodSignature defines the parameters and return values for a method. The MethodSignature improves traceability while enhancing the ability for automation engines to execute a MethodDef's FormalExpression. Most Methods use one or more input parameters and return one or more values.",
            "properties": {
                "ParameterRef": {
                    "description": "Parameter reference: The Parameter element represents a method parameter used as part of a MethodSignature in MethodDef, ConditionDef, or RangeCheck.",
                    "items": {
                        "$ref": "#/$defs/Parameter"
                    },
                    "type": "array"
                },
                "ReturnValueRef": {
                    "description": "ReturnValue reference: The ReturnValue element represents a return value used as part of a MethodSignature in MethodDef, ConditionDef, or RangeCheck. A return value identifies values passed from the Method to the calling element. A ReturnValue may be computed by a FormalExpression.",
                    "items": {
                        "$ref": "#/$defs/ReturnValue"
                    },
                    "type": "array"
                }
            },
            "title": "MethodSignature",
            "type": "object"
        },
        "MethodType": {
            "description": "Enumeration used in Type",
            "enum": [
                "Computation",
                "Imputation",
                "Preload",
                "Transpose"
            ],
            "title": "MethodType",
            "type": "string"
        },
        "ODMCoreType": {
            "description": "",
            "enum": [
                "HR",
                "O",
                "R/C"
            ],
            "title": "ODMCoreType",
            "type": "string"
        },
        "ODMFileMetadata": {
            "additionalProperties": false,
            "description": "Root element for ODM Documents. The ODM element is the top-level (root) element of each ODM document.",
            "properties": {
                "AdminDataRef": {
                    "description": "AdminData reference: Administrative information about users, locations, organizations, and electronic signatures.",
                    "items": {
                        "$ref": "#/$defs/AdminData"
                    },
                    "type": "array"
                },
                "AsOfDateTime": {
                    "description": "The date/time at which the source database was queried in order to create this document.",
                    "format": "date-time",
                    "type": "string"
                },
                "AssociationRef": {
                    "description": "Association reference: An association permits an annotation to be placed on an ordered pair of entities rather than on just one. The first and second KeySets identify the start and end of the annotated \"link.",
                    "items": {
                        "$ref": "#/$defs/Association"
                    },
                    "type": "array"
                },
                "ClinicalDataRef": {
                    "description": "ClinicalData reference: Clinical data for 1 or more subjects.",
                    "items": {
                        "$ref": "#/$defs/ClinicalData"
                    },
                    "type": "array"
                },
                "ContextRef": {
                    "$ref": "#/$defs/Context",
                    "description": "Indicates the intended usage of the ODM document. Archive - indicates that the file is intended to meet the requirements of an electronic record as defined in 21 CFR 11. Submission - indicates that the file is intended to be used for regulatory submission. Exchange - indicates that the file was generated to be imported into an ODM compliant system."
                },
                "CreationDateTime": {
                    "description": "Time of creation of the file containing the document.",
                    "format": "date-time",
                    "type": "string"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "FileOID": {
                    "description": "A unique identifier for this file.",
                    "type": "string"
                },
                "FileTypeRef": {
                    "$ref": "#/$defs/FileType",
                    "description": "Snapshot means that the document contains only the current state of the data and metadata it describes, and no transactional history. Transactional means that the document may contain more than one instance per data point. Query means the document contains only ClinicalData/Query elements."
                },
                "GranularityRef": {
                    "$ref": "#/$defs/Granularity",
                    "description": "Granularity is intended to give the sender a shorthand way to Describes the scope of information in the document, for certain common types of documents. All means the entire study; Metadata means the Study/MetaDataVersion element; AdminData and ReferenceData mean the corresponding elements; AllClinicalData means all of the ClinicalData collected for the study. SingleSite, means all of the Clinical Data for a single study site. SingleSubject means all of the Clinical Data for a single Subject."
                },
                "ODMVersionRef": {
                    "description": "The version of the ODM standard used.",
                    "type": "string"
                },
                "Originator": {
                    "description": "The organization that generated the ODM file.",
                    "type": "string"
                },
                "PriorFileOID": {
                    "description": "Reference to the previous file (if any) in a series.",
                    "type": "string"
                },
                "ReferenceDataRef": {
                    "description": "ReferenceData reference: Reference data provides information on how to interpret clinical data. For example, reference data might include lab normal ranges. For a study that uses CDISC standards, reference data might include SDTM Trial Design datasets.",
                    "items": {
                        "$ref": "#/$defs/ReferenceData"
                    },
                    "type": "array"
                },
                "SourceSystem": {
                    "description": "The computer system or database management system that is the source of the information in this file.",
                    "type": "string"
                },
                "SourceSystemVersion": {
                    "description": "The version of the \"SourceSystem\" above.",
                    "type": "string"
                },
                "StudyRef": {
                    "description": "Study reference: This element collects static structural information about an individual study.",
                    "items": {
                        "$ref": "#/$defs/Study"
                    },
                    "type": "array"
                }
            },
            "required": [
                "FileTypeRef",
                "FileOID",
                "CreationDateTime"
            ],
            "title": "ODMFileMetadata",
            "type": "object"
        },
        "Organization": {
            "additionalProperties": false,
            "description": "An organization can reference a parent organization. Users may be associated with an Organization. An Organization may be associated with a Location. A User, Location, or Organization may have an address.",
            "properties": {
                "AddressRef": {
                    "description": "Address reference: The postal address for a user, location, or organization.",
                    "items": {
                        "$ref": "#/$defs/Address"
                    },
                    "type": "array"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "LocationOID": {
                    "description": "Reference to a location where data is collected and/or study subjects are treated.",
                    "type": "string"
                },
                "Name": {
                    "description": "Formal, human readable name of the organization.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier for the organization.",
                    "type": "string"
                },
                "PartOfOrganizationOID": {
                    "description": "Reference to a parent organization.",
                    "type": "string"
                },
                "Role": {
                    "description": "Role of the organization in the current study.",
                    "type": "string"
                },
                "TelecomRef": {
                    "description": "Telecom reference: The telecommunication contacts points of a user, a location, or an organization. The Type attribute designates the type of contact.",
                    "items": {
                        "$ref": "#/$defs/Telecom"
                    },
                    "type": "array"
                },
                "Type": {
                    "$ref": "#/$defs/OrganizationType",
                    "description": "Categorization of organizations associated with clinical studies."
                }
            },
            "required": [
                "OID",
                "Name",
                "Type"
            ],
            "title": "Organization",
            "type": "object"
        },
        "OrganizationType": {
            "description": "Enumeration used in Type",
            "enum": [
                "Sponsor",
                "Site",
                "CRO",
                "Lab",
                "Other",
                "TechnologyProvider"
            ],
            "title": "OrganizationType",
            "type": "string"
        },
        "Origin": {
            "additionalProperties": false,
            "description": "Origin defines the source metadata, where applicable, for ODM ItemRefs or ItemGroupRefs. Origin as a child element replaces the Origin attribute in ODM v1.3 that exists for the ItemDef and ItemGroupDef elements.The Origin element is based on the def:Origin element in Define-XML v2.1 with the Trace-XML v1.0 extension.",
            "properties": {
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "DocumentRefRef": {
                    "description": "The DocumentRef element is a container for page references in a PDF file.",
                    "items": {
                        "$ref": "#/$defs/DocumentRef"
                    },
                    "type": "array"
                },
                "Source": {
                    "$ref": "#/$defs/OriginSource",
                    "description": "I ndicates the party responsible for the data's origin type."
                },
                "SourceItemsRef": {
                    "$ref": "#/$defs/SourceItems",
                    "description": "SourceItems reference: Identifies source items as needed to support automated data capture and end-to-end traceability."
                },
                "Type": {
                    "$ref": "#/$defs/OriginType",
                    "description": "Identifies how the clinical data values were obtained."
                }
            },
            "required": [
                "Type"
            ],
            "title": "Origin",
            "type": "object"
        },
        "OriginSource": {
            "description": "Enumeration used in Source",
            "enum": [
                "Investigator",
                "Sponsor",
                "Subject",
                "Vendor"
            ],
            "title": "OriginSource",
            "type": "string"
        },
        "OriginType": {
            "description": "Enumeration used in Type",
            "enum": [
                "Assigned",
                "Collected",
                "Derived",
                "EHR",
                "Not Available",
                "Other",
                "Predecessor",
                "Protocol"
            ],
            "title": "OriginType",
            "type": "string"
        },
        "OtherText": {
            "additionalProperties": false,
            "description": "Any other text needed as part of a user's postal address.",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "OtherText",
            "type": "object"
        },
        "PDFPageRef": {
            "additionalProperties": false,
            "description": "This element is the container for CRF page references.",
            "properties": {
                "FirstPage": {
                    "description": "First page in a range of pages. Note that the way to indicate the range of pages depends on the associated Type attribute provided.",
                    "type": "integer"
                },
                "LastPage": {
                    "description": "Last page in a range of pages. Note that the way to indicate the range of pages depends on the associated Type attribute provided.",
                    "type": "integer"
                },
                "PageRefs": {
                    "description": "List of PDF pages, separated by spaces. Sample: \"17 20 32",
                    "type": "string"
                },
                "Title": {
                    "description": "Alternative label to provide a more specific and descriptive reference to a page link.",
                    "type": "string"
                },
                "Type": {
                    "$ref": "#/$defs/PDFPageType",
                    "description": "Type of page for page reference(s) indicated in the PageRefs attribute"
                }
            },
            "required": [
                "Type"
            ],
            "title": "PDFPageRef",
            "type": "object"
        },
        "PDFPageType": {
            "description": "Enumeration used in Type",
            "enum": [
                "NamedDestination",
                "PhysicalRef"
            ],
            "title": "PDFPageType",
            "type": "string"
        },
        "Parameter": {
            "additionalProperties": false,
            "description": "The Parameter element represents a method parameter used as part of a MethodSignature in MethodDef, ConditionDef, or RangeCheck.",
            "properties": {
                "DataTypeRef": {
                    "$ref": "#/$defs/DataType",
                    "description": "Parameter datatype."
                },
                "DefinitionRef": {
                    "description": "A free-text definition of the parameter",
                    "type": "string"
                },
                "Name": {
                    "description": "The parameter name - typically the name of an ItemDef referenced in the ItemGroupDef.",
                    "type": "string"
                },
                "OrderNumber": {
                    "description": "Position of the Parameter in the MethodSignature",
                    "type": "integer"
                }
            },
            "required": [
                "Name",
                "DataTypeRef"
            ],
            "title": "Parameter",
            "type": "object"
        },
        "ParameterValue": {
            "additionalProperties": false,
            "description": "This element contains the value of the study parameter as text content.",
            "properties": {
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "ValueRef": {
                    "description": "Value for parent StudyParameter/@Term.",
                    "type": "string"
                }
            },
            "required": [
                "ValueRef"
            ],
            "title": "ParameterValue",
            "type": "object"
        },
        "PostalCode": {
            "additionalProperties": false,
            "description": "The postal code part of a user's postal address.",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "PostalCode",
            "type": "object"
        },
        "Prefix": {
            "additionalProperties": false,
            "description": "Title or other prefix. Maps to FHIR HumanName.prefix (https://www.hl7.org/fhir/datatypes.html#humanname).",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "Prefix",
            "type": "object"
        },
        "Prompt": {
            "additionalProperties": false,
            "description": "A prompt text shown to a human user when prompted to provide data for an item on paper or on a screen. The Prompt is a short version of the question.",
            "properties": {
                "TranslatedTextRef": {
                    "description": "TranslatedText reference: Human-readable text that is appropriate for a particular language. TranslatedText elements typically occur in a series, presenting a set of alternative textual renditions for different languages and types.",
                    "items": {
                        "$ref": "#/$defs/TranslatedText"
                    },
                    "type": "array"
                }
            },
            "title": "Prompt",
            "type": "object"
        },
        "Protocol": {
            "additionalProperties": false,
            "description": "The Protocol element lists the kinds of study events that can occur within a specific version of a study. All clinical data must occur within one of these study events.",
            "properties": {
                "AliasRef": {
                    "description": "Alias reference: An Alias provides an additional name for an element. The Context attribute specifies the application domain in which this additional name is relevant.",
                    "items": {
                        "$ref": "#/$defs/Alias"
                    },
                    "type": "array"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "InclusionExclusionCriteriaRef": {
                    "$ref": "#/$defs/InclusionExclusionCriteria",
                    "description": "InclusionExclusionCriteria reference: The InclusionExclusionCriteria element can contain 2 lists of Criterion elements, represented by the 2 elements InclusionCriteria and ExclusionCriteria. Together, these criteria determine the eligibility of a subject for the study. The actual condition to be evaluated is contained in an ODM ConditionDef, which is referenced by each Criterion\u201fs ConditionOID attribute."
                },
                "StudyEndPointsRef": {
                    "$ref": "#/$defs/StudyEndPoints",
                    "description": "StudyEndPoints reference: Go to start of metadata"
                },
                "StudyEstimandsRef": {
                    "$ref": "#/$defs/StudyEstimands",
                    "description": "StudyEstimands reference: None"
                },
                "StudyEventGroupRefRef": {
                    "description": "StudyEventGroupRef reference: This element references a StudyEventGroupDef as it occurs within a specific version of a study. The list of StudyEventGroupRefs identifies the types of study group events that are allowed to occur within the study.",
                    "items": {
                        "$ref": "#/$defs/StudyEventGroupRef"
                    },
                    "type": "array"
                },
                "StudyIndicationsRef": {
                    "$ref": "#/$defs/StudyIndications",
                    "description": "StudyIndications reference: StudyIndications is a container element for individual StudyIndication elements."
                },
                "StudyInterventionsRef": {
                    "$ref": "#/$defs/StudyInterventions",
                    "description": "StudyInterventions reference: The StudyInterventions element is a container element for individual StudyIntervention elements."
                },
                "StudyObjectivesRef": {
                    "$ref": "#/$defs/StudyObjectives",
                    "description": "StudyObjectives reference: The StudyObjectives is a container element for individual StudyObjective elements."
                },
                "StudyStructureRef": {
                    "$ref": "#/$defs/StudyStructure",
                    "description": "StudyStructure reference: The StudyStructure element describes the general structure of a clinical study with arms, epochs, and workflows."
                },
                "StudySummaryRef": {
                    "$ref": "#/$defs/StudySummary",
                    "description": "StudySummary reference: The StudyParameter element allows to provide a set of study design parameters such as anticipated number of subjects, minimum and maximum age of the participants, or planned number of arms."
                },
                "StudyTargetPopulationRefRef": {
                    "description": "StudyTargetPopulationRef reference: None",
                    "type": "string"
                },
                "StudyTimingsRef": {
                    "$ref": "#/$defs/StudyTimings",
                    "description": "StudyTimings reference: The StudyTimings element is a container element for individual StudyTiming elements."
                },
                "TrialPhaseRef": {
                    "$ref": "#/$defs/TrialPhase",
                    "description": "TrialPhase reference: The TrialPhase element designates the phase of the study in the clinical trial."
                },
                "WorkflowRefRef": {
                    "$ref": "#/$defs/WorkflowRef",
                    "description": "WorkflowRef reference: The WorkflowRef references a workflow definition"
                }
            },
            "title": "Protocol",
            "type": "object"
        },
        "Query": {
            "additionalProperties": false,
            "description": "The Query element represents a request for clarification on a data item collected for a clinical trial, specifically a request from a sponsor or sponsor\u2019s representative to an investigator to resolve an error or inconsistency discovered during data review. Queries can be created manually by individuals such as site monitors or data managers or automatically by systems. The full text of the Query exists in the Value child element. The optional Name attribute provide the means to provide a short identifier that can be included in listing or user interfaces.",
            "properties": {
                "AuditRecordRef": {
                    "description": "AuditRecord reference: An AuditRecord carries information pertaining to the creation, deletion, or modification of clinical data. This information includes who performed that action, and where, when, and why that action was performed.AuditRecord information describes a change to clinical data, but is not itself clinical data. The value of some clinical data can always be changed by a subsequent transaction, but history cannot be changed, only added to.",
                    "items": {
                        "$ref": "#/$defs/AuditRecord"
                    },
                    "type": "array"
                },
                "LastUpdateDatetime": {
                    "description": "When was this Query updated? Will correspond to the creation date or the last updated date?",
                    "format": "date-time",
                    "type": "string"
                },
                "Name": {
                    "description": "Name for a query that can be used to identify the query in a listing or user interface.",
                    "type": "string"
                },
                "OID": {
                    "description": "Query unique identifier",
                    "type": "string"
                },
                "Source": {
                    "$ref": "#/$defs/QuerySourceType",
                    "description": "Origin of the Query."
                },
                "State": {
                    "$ref": "#/$defs/QueryStateType",
                    "description": "Status of the Query"
                },
                "Target": {
                    "description": "Element upon which the Query is raised. The parent element is the Target when the Target attribute is omitted.",
                    "type": "string"
                },
                "Type": {
                    "$ref": "#/$defs/QueryType",
                    "description": "Indicates whether Is the Query was raised manually by a user or automatically via an edit check."
                },
                "ValueRef": {
                    "$ref": "#/$defs/Value",
                    "description": "Human-readable designation of the trial phase."
                }
            },
            "required": [
                "OID",
                "Source",
                "State",
                "LastUpdateDatetime"
            ],
            "title": "Query",
            "type": "object"
        },
        "QuerySourceType": {
            "description": "Enumeration used in Source",
            "enum": [
                "System",
                "Data Management",
                "Site Monitor",
                "Coding System",
                "Safety Reviewer"
            ],
            "title": "QuerySourceType",
            "type": "string"
        },
        "QueryStateType": {
            "description": "Enumeration used in State",
            "enum": [
                "Candidate",
                "Open",
                "Answered",
                "Closed",
                "Cancelled",
                "Resolved"
            ],
            "title": "QueryStateType",
            "type": "string"
        },
        "QueryType": {
            "description": "Enumeration used in Type",
            "enum": [
                "Manual",
                "System"
            ],
            "title": "QueryType",
            "type": "string"
        },
        "Question": {
            "additionalProperties": false,
            "description": "A label shown to a human user when prompted to provide data for an item on paper or on a screen.",
            "properties": {
                "TranslatedTextRef": {
                    "description": "TranslatedText reference: Human-readable text that is appropriate for a particular language. TranslatedText elements typically occur in a series, presenting a set of alternative textual renditions for different languages and types.",
                    "items": {
                        "$ref": "#/$defs/TranslatedText"
                    },
                    "type": "array"
                }
            },
            "title": "Question",
            "type": "object"
        },
        "RangeCheck": {
            "additionalProperties": false,
            "description": "A RangeCheck defines a constraint on the value of the enclosing item. It represents an expression that evaluates to True when the ItemData value is valid or False when the ItemData value is invalid. The expression is specified using either Comparator and CheckValue or using FormalExpressions.",
            "properties": {
                "CheckValueRef": {
                    "description": "CheckValue reference: A comparison value used in a range check.",
                    "items": {
                        "$ref": "#/$defs/CheckValue"
                    },
                    "type": "array"
                },
                "ComparatorRef": {
                    "$ref": "#/$defs/Comparator",
                    "description": "Comparison operator used to compare the item and value(s)."
                },
                "ErrorMessageRef": {
                    "$ref": "#/$defs/ErrorMessage",
                    "description": "ErrorMessage reference: Error message provided to user when the range check fails."
                },
                "FormalExpressionRef": {
                    "description": "FormalExpression reference: A FormalExpression used within a ConditionDef or a RangeCheck must evaluate to True or False. A FormalExpression referenced within a MethodDef having Type Imputation, Computation, or Transpose must evaluate to the correct DataType for an Item that may be imputed or computed using the Method. A FormalExpression gets parameter and return value definitions from the MethodSignature element. The data types in the MethodSignature parameters and return values must match the corresponding data types in the FormalExpression.",
                    "items": {
                        "$ref": "#/$defs/FormalExpression"
                    },
                    "type": "array"
                },
                "ItemOID": {
                    "description": "Identifies a variable to compare against.",
                    "type": "string"
                },
                "MethodSignatureRef": {
                    "$ref": "#/$defs/MethodSignature",
                    "description": "MethodSignature reference: A MethodSignature defines the parameters and return values for a method. The MethodSignature improves traceability while enhancing the ability for automation engines to execute a MethodDef's FormalExpression. Most Methods use one or more input parameters and return one or more values."
                },
                "SoftHard": {
                    "$ref": "#/$defs/SoftOrHard",
                    "description": "Type of range check. Soft indicates that a warning occurs when the RangeCheck fails. Hard indicates that an error occurs when the RangeCheck fails."
                }
            },
            "title": "RangeCheck",
            "type": "object"
        },
        "ReasonForChange": {
            "additionalProperties": false,
            "description": "A user-supplied reason for a data change.",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "ReasonForChange",
            "type": "object"
        },
        "ReferenceData": {
            "additionalProperties": false,
            "description": "Reference data provides information on how to interpret clinical data. For example, reference data might include lab normal ranges. For a study that uses CDISC standards, reference data might include SDTM Trial Design datasets.",
            "properties": {
                "AnnotationRef": {
                    "description": "Annotation reference: A general note about clinical data. If an annotation has both a comment and flags, the flags should be related to the comment.",
                    "type": "string"
                },
                "AuditRecordRef": {
                    "$ref": "#/$defs/AuditRecord",
                    "description": "AuditRecord reference: An AuditRecord carries information pertaining to the creation, deletion, or modification of clinical data. This information includes who performed that action, and where, when, and why that action was performed.AuditRecord information describes a change to clinical data, but is not itself clinical data. The value of some clinical data can always be changed by a subsequent transaction, but history cannot be changed, only added to."
                },
                "ItemGroupDataRef": {
                    "description": "ItemGroupData reference: Clinical data corresponding to an ItemGroupRef defined in the active MetaDataVersion.",
                    "items": {
                        "$ref": "#/$defs/ItemGroupData"
                    },
                    "type": "array"
                },
                "MetaDataVersionOID": {
                    "description": "References the MetaDataVersion (within the above Study) for this reference data. All metadata references (OIDs) occurring within this ReferenceData element refer to definitions within the selected metadata version. Signature elements nested within ReferenceData have no meaning, and should be ignored. The TransactionType attribute behaves the same within ReferenceData as it does within ClinicalData.",
                    "type": "string"
                },
                "SignatureRefRef": {
                    "description": "SignatureRef reference: None",
                    "type": "string"
                },
                "StudyOID": {
                    "description": "References the Study that defines the metadata for this reference data.",
                    "type": "string"
                }
            },
            "required": [
                "StudyOID",
                "MetaDataVersionOID"
            ],
            "title": "ReferenceData",
            "type": "object"
        },
        "RelativeTimingConstraint": {
            "additionalProperties": false,
            "description": "The RelativeTimingConstraint element describes a relative timing constraint between 2 activities or groups of activities, represented by StudyEventGroups, StudyEvents, ItemGroups, or Items.",
            "properties": {
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "Name": {
                    "description": "Human readable name.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier.",
                    "type": "string"
                },
                "PredecessorOID": {
                    "description": "Identifies a StudyEventGroup, StudyEvent, ItemGroup or Item that occurs immediately before the RelativeTimepointTarget.",
                    "type": "string"
                },
                "SuccessorOID": {
                    "description": "Identifies a StudyEventGroup, StudyEvent, ItemGroup or Item tha occurs immediately after the RelativeTimepointTarget.",
                    "type": "string"
                },
                "TimepointPostWindow": {
                    "description": "Adds an upper bound to a time window for the RelativeTimepointTarget.",
                    "type": "string"
                },
                "TimepointPreWindow": {
                    "description": "Adds a lower bound to a time window for the RelativeTimepointTarget.",
                    "type": "string"
                },
                "TimepointRelativeTarget": {
                    "description": "The relative timing between two activities or groups of activities.",
                    "type": "string"
                },
                "Type": {
                    "$ref": "#/$defs/RelativeTimingConstraintType",
                    "description": "Defines how the timing is to be defined between the two activities, starting from the start or the end of the source activity, and ending at the start or the end of the target activity."
                }
            },
            "required": [
                "OID",
                "Name",
                "TimepointRelativeTarget"
            ],
            "title": "RelativeTimingConstraint",
            "type": "object"
        },
        "RelativeTimingConstraintType": {
            "description": "Enumeration used in Type",
            "enum": [
                "StartToStart",
                "StartToFinish",
                "FinishToStart",
                "FinishToFinish"
            ],
            "title": "RelativeTimingConstraintType",
            "type": "string"
        },
        "Resource": {
            "additionalProperties": false,
            "description": "Describes an external resource used as the source for the parent ItemGroup or Item.",
            "properties": {
                "Attribute": {
                    "description": "Field provided by the Name attribute where the data or information can be obtained. Examples are \"valueQuantity.value\" or \"valueQuantity.unit\" for the case of an HL7-FHIR \"Observation\", \"Repeating\" for the case of an ODM ItemGroupDef element, \"unit\" for the case of an HL7-CDA doseQuantity, \"Code\" or \"Name\" for the case of field 5 (which is composite) of an HL7-v2 OBX message. The Name and Attribute attributes are meant to provide traceability documentation.",
                    "type": "string"
                },
                "Label": {
                    "description": "Used to link the value to a named MethodDef parameter.",
                    "type": "string"
                },
                "Name": {
                    "description": "The human readable identifier of the element or field in the external resource. Examples include : \"ItemGroupDef\" (for Type=\"ODM\"), \"Observation\" (for Type=\"HL7-FHIR\"), \"substanceAdministration.doseQuantity\" (for Type=\"HL7-CDA\"), \"OBX-5\" (for field 5 (\"Observation Result\") for Type=\"HL7-v2\").",
                    "type": "string"
                },
                "SelectionRef": {
                    "description": "Selection reference: Template for machine-readable/executable expression for retrieving the data or information from an external resource.",
                    "items": {
                        "$ref": "#/$defs/Selection"
                    },
                    "type": "array"
                },
                "Type": {
                    "description": "Categorization of external resources. Examples include: \"ODM\", \"HL7-FHIR\", \"HL7-CDA\", \"HL7-v2\", \"OpenEHR-extract\". Note: Extensible controlled terminology may be developed and published in the future.",
                    "type": "string"
                }
            },
            "required": [
                "Type",
                "Name"
            ],
            "title": "Resource",
            "type": "object"
        },
        "ReturnValue": {
            "additionalProperties": false,
            "description": "The ReturnValue element represents a return value used as part of a MethodSignature in MethodDef, ConditionDef, or RangeCheck. A return value identifies values passed from the Method to the calling element. A ReturnValue may be computed by a FormalExpression.",
            "properties": {
                "DataTypeRef": {
                    "$ref": "#/$defs/DataType",
                    "description": "Return value datatype"
                },
                "DefinitionRef": {
                    "description": "A free-text definition of the return value",
                    "type": "string"
                },
                "Name": {
                    "description": "The return value name.",
                    "type": "string"
                },
                "OrderNumber": {
                    "description": "Position of the ReturnValue",
                    "type": "integer"
                }
            },
            "required": [
                "Name",
                "DataTypeRef"
            ],
            "title": "ReturnValue",
            "type": "object"
        },
        "Selection": {
            "additionalProperties": false,
            "description": "Template for machine-readable/executable expression for retrieving the data or information from an external resource.",
            "properties": {
                "Path": {
                    "description": "Provides the machine-executable instruction or template for it to obtain the data or information from the resource. The value of the Path attribute can either be an absolute path, or a relative path starting from the information in the \"Name\" and \"Attribute\" attributes of the parent Resource element.",
                    "type": "string"
                }
            },
            "required": [
                "Path"
            ],
            "title": "Selection",
            "type": "object"
        },
        "SignMethod": {
            "description": "Enumeration used in Methodology",
            "enum": [
                "Digital",
                "Electronic"
            ],
            "title": "SignMethod",
            "type": "string"
        },
        "Signature": {
            "additionalProperties": false,
            "description": "An electronic signature applies to a collection of clinical data. This indicates that some user accepts legal responsibility for that data. See 21 CFR Part 11. The signature identifies the person signing, the location of signing, the signature meaning (via the referenced SignatureDef), the date and time of signing, and (in the case of a digital signature) an encrypted hash of the included data.",
            "properties": {
                "DateTimeStampRef": {
                    "$ref": "#/$defs/DateTimeStamp",
                    "description": "DateTimeStamp reference: None"
                },
                "ID": {
                    "description": "Unique identifier for the leaf that is referenced.",
                    "type": "string"
                },
                "LocationRefRef": {
                    "$ref": "#/$defs/LocationRef",
                    "description": "LocationRef reference: A reference to the user's physical location."
                },
                "SignatureRefRef": {
                    "$ref": "#/$defs/SignatureRef",
                    "description": "SignatureRef reference: None"
                },
                "UserRefRef": {
                    "$ref": "#/$defs/UserRef",
                    "description": "UserRef reference: None"
                }
            },
            "required": [
                "ID"
            ],
            "title": "Signature",
            "type": "object"
        },
        "SignatureDef": {
            "additionalProperties": false,
            "description": "Provides Metadata for signatures included in the /ODM/ClinicalData.",
            "properties": {
                "LegalReasonRef": {
                    "$ref": "#/$defs/LegalReason",
                    "description": "LegalReason reference: The responsibility statement associated with a signature (e.g., \"The signer accepts responsibility for the accuracy of this data.\")."
                },
                "MeaningRef": {
                    "$ref": "#/$defs/Meaning",
                    "description": "Meaning reference: A short name or description for this signature. It should reflect the context of the signature and/or the text that appears when the signature is applied in the user interface."
                },
                "Methodology": {
                    "$ref": "#/$defs/SignMethod",
                    "description": "Defines the type of electronic signature, including the meaning as required by 21 CFR Part 11 ."
                },
                "OID": {
                    "description": "Unique identifier.",
                    "type": "string"
                }
            },
            "required": [
                "OID"
            ],
            "title": "SignatureDef",
            "type": "object"
        },
        "SignatureRef": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "SignatureOID": {
                    "description": "Reference to the SignatureDef .",
                    "type": "string"
                }
            },
            "required": [
                "SignatureOID"
            ],
            "title": "SignatureRef",
            "type": "object"
        },
        "SiteRef": {
            "additionalProperties": false,
            "description": "lement NameSiteRefParent ElementsSubjectDataElement XPath(s)/ODM/ClinicalData/SubjectData/SiteRefElement Textual ValueNoneAttributesLocationOIDChild ElementsNoneUsage/Business RulesBusiness Rule(s):Must be provided when the /ODM/FileType is Transactional.",
            "properties": {
                "LocationOID": {
                    "description": "Reference to a Location definition.",
                    "type": "string"
                }
            },
            "required": [
                "LocationOID"
            ],
            "title": "SiteRef",
            "type": "object"
        },
        "SoftOrHard": {
            "description": "Enumeration used in SoftHard",
            "enum": [
                "Soft",
                "Hard"
            ],
            "title": "SoftOrHard",
            "type": "string"
        },
        "SourceID": {
            "additionalProperties": false,
            "description": "Information that identifies the source of the data within an originating system.",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "SourceID",
            "type": "object"
        },
        "SourceItem": {
            "additionalProperties": false,
            "description": "Provides the information needed to identify the source metadata.",
            "properties": {
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "ItemGroupOID": {
                    "description": "References the ItemGroupDef that provides the ItemGroup or dataset metadata.",
                    "type": "string"
                },
                "ItemOID": {
                    "description": "References the ItemDef that provides the variable metadata.",
                    "type": "string"
                },
                "MetaDataVersionOID": {
                    "description": "References the MetaDataVersion that provides the metadata when referencing another ODM document.",
                    "type": "string"
                },
                "Name": {
                    "description": "Provides a way to connect an argument to a parameter when SourceItems are inputs to methods. It allows the name used in the programming code in the method description to make it easier to trace the use of the value.",
                    "type": "string"
                },
                "ResourceRef": {
                    "description": "Resource reference: Describes an external resource used as the source for the parent ItemGroup or Item.",
                    "items": {
                        "$ref": "#/$defs/Resource"
                    },
                    "type": "array"
                },
                "StudyOID": {
                    "description": "References the Study that provides the metadata when referencing another ODM document.",
                    "type": "string"
                },
                "leafID": {
                    "description": "References a leaf element that provides a reference to another ODM document. This is necessary when the source ItemOID references an ItemDef contained in a different ODM document.",
                    "type": "string"
                }
            },
            "required": [
                "leafID"
            ],
            "title": "SourceItem",
            "type": "object"
        },
        "SourceItems": {
            "additionalProperties": false,
            "description": "Identifies source items as needed to support automated data capture and end-to-end traceability.",
            "properties": {
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "SourceItemRef": {
                    "description": "SourceItem reference: Provides the information needed to identify the source metadata.",
                    "items": {
                        "$ref": "#/$defs/SourceItem"
                    },
                    "type": "array"
                }
            },
            "title": "SourceItems",
            "type": "object"
        },
        "Standard": {
            "additionalProperties": false,
            "description": "The Standard element describes each standard used within the MetaDataVersion element.",
            "properties": {
                "CommentOID": {
                    "description": "Reference to the unique ID of a CommentDef element that contains the comment for the Standard element Business Rule: Must match the OID of a CommentDef in the same MetaDataVersion",
                    "type": "string"
                },
                "Name": {
                    "$ref": "#/$defs/StandardName",
                    "description": "Name of the external standard to which the data conforms."
                },
                "OID": {
                    "description": "Unique identifier for the standard.",
                    "type": "string"
                },
                "PublishingSet": {
                    "$ref": "#/$defs/StandardPublishingSet",
                    "description": "The name of the publishing set that contains the published standard."
                },
                "Status": {
                    "description": "Publishing status of the standard.",
                    "type": "string"
                },
                "Type": {
                    "$ref": "#/$defs/StandardType",
                    "description": "The type of standard."
                },
                "Version": {
                    "description": "Version of the external standard to which the data conforms.",
                    "type": "string"
                }
            },
            "required": [
                "OID",
                "Name",
                "Type",
                "Version",
                "Status"
            ],
            "title": "Standard",
            "type": "object"
        },
        "StandardName": {
            "description": "Enumeration used in Name",
            "enum": [
                "ADaMIG",
                "CDISC/NCI",
                "SDTMIG",
                "SDTMIG-AP",
                "SDTMIG-MD",
                "SENDIG",
                "SENDIG-AR",
                "SENDIG-DART"
            ],
            "title": "StandardName",
            "type": "string"
        },
        "StandardPublishingSet": {
            "description": "Enumeration used in PublishingSet",
            "enum": [
                "ADaM",
                "CDASH",
                "DEFINE-XML",
                "SDTM",
                "SEND"
            ],
            "title": "StandardPublishingSet",
            "type": "string"
        },
        "StandardStatusEnum": {
            "description": "",
            "enum": [
                "Draft",
                "Final",
                "Provisional"
            ],
            "title": "StandardStatusEnum",
            "type": "string"
        },
        "StandardType": {
            "description": "Enumeration used in Type",
            "enum": [
                "CT",
                "IG"
            ],
            "title": "StandardType",
            "type": "string"
        },
        "Standards": {
            "additionalProperties": false,
            "description": "The Standards element provides a container for the list of Standard elements referenced in the MetaDataVersion for the Study..",
            "properties": {
                "StandardRef": {
                    "description": "Definition of a standard referenced in the Define-XML document.",
                    "items": {
                        "$ref": "#/$defs/Standard"
                    },
                    "type": "array"
                }
            },
            "title": "Standards",
            "type": "object"
        },
        "StateProv": {
            "additionalProperties": false,
            "description": "The state or province name part of a user's postal address.",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "StateProv",
            "type": "object"
        },
        "StreetName": {
            "additionalProperties": false,
            "description": "The street name part of a user's postal address.",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "StreetName",
            "type": "object"
        },
        "Study": {
            "additionalProperties": false,
            "description": "This element collects static structural information about an individual study.",
            "properties": {
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "MetaDataVersionRefRef": {
                    "description": "MetaDataVersionRef reference: A reference to a MetaDataVersion used at the containing Location. The EffectiveDate reflects the possibility that the metadata may change over the course of the study.",
                    "items": {
                        "$ref": "#/$defs/MetaDataVersion"
                    },
                    "type": "array"
                },
                "OID": {
                    "description": "Unique identifier for the study.",
                    "type": "string"
                },
                "ProtocolName": {
                    "description": "P rotocol identifier or protocol number assigned to the study . It is used by the regulatory authority or clinical trial registry.",
                    "type": "string"
                },
                "Status": {
                    "description": "Represents the workflow status for the version of the study with content included in the enclosed Study element metadata. Status values can be different in each system and may have specific meaning within each system, e.g. a \"Production\" version of a study in a particular source system may be non-editable and editable in a different source system. If no VersionID is provided, Status refers to the status of the Study as a whole.",
                    "type": "string"
                },
                "StudyName": {
                    "description": "Sponsoring organization's internal name for the study. If no internal name is available, the value is expected to be the same value as ProtocolName.",
                    "type": "string"
                },
                "VersionID": {
                    "description": "Identifier for the specific version of the study in the source system that the enclosed Study element metadata refers to.",
                    "type": "string"
                },
                "VersionName": {
                    "description": "Short descriptive label for the version of the study, e.g. \"Initial go live\" when VersionID = \"<study version ID for Initial go live>\". VersionName may be provided when a VersionID is provided.",
                    "type": "string"
                }
            },
            "required": [
                "OID",
                "StudyName",
                "ProtocolName"
            ],
            "title": "Study",
            "type": "object"
        },
        "StudyEndPoint": {
            "additionalProperties": false,
            "description": "A study end point reflects an outcome measure of interest that is statistically analyzed to address a particular research question for the study. It typically specifies the type of assessments made; the timing of those assessments; the assessment tools used; and other details, as applicable, such as how multiple assessments within an individual are to be combined.",
            "properties": {
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "FormalExpressionRef": {
                    "description": "FormalExpression reference: A FormalExpression used within a ConditionDef or a RangeCheck must evaluate to True or False. A FormalExpression referenced within a MethodDef having Type Imputation, Computation, or Transpose must evaluate to the correct DataType for an Item that may be imputed or computed using the Method. A FormalExpression gets parameter and return value definitions from the MethodSignature element. The data types in the MethodSignature parameters and return values must match the corresponding data types in the FormalExpression.",
                    "items": {
                        "$ref": "#/$defs/FormalExpression"
                    },
                    "type": "array"
                },
                "Level": {
                    "$ref": "#/$defs/StudyEstimandLevel",
                    "description": "Level for the Study Endpoint. Primary endpoint(s) are typically efficacy measures that address the main research question [1] Secondary endpoints are generally not sufficient to influence decision-making alone, but may support the claim of efficacy by demonstrating additional effects or by supporting a causal mechanism. [2] Exploratory endpoints (where nominated) typically capture outcomes that occur less frequently or which may be useful for exploring novel hypotheses. [1]"
                },
                "Name": {
                    "description": "Human readable identifier for the StudyEndPoint element.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier for the StudyEndPoint element",
                    "type": "string"
                },
                "Type": {
                    "$ref": "#/$defs/StudyEndPointType",
                    "description": "The type of end point. Simple: measures the change of a single outcome that is meaningful in the context of the disease being studied. Humane: the point at which pain and/or distress is terminated, minimized, or reduced. Surrogate: a measure of effect of a specific treatment that may correlate with a real clinical endpoint but does not necessarily have a guaranteed relationship (e.g., a biomarker). Combined: end point that is a combination of several measures. Example: A heart attack study may report the incidence of the combined endpoint of chest pain, myocardial infarction, or death."
                }
            },
            "required": [
                "OID",
                "Name"
            ],
            "title": "StudyEndPoint",
            "type": "object"
        },
        "StudyEndPointRef": {
            "additionalProperties": false,
            "description": "Go to start of metadata",
            "properties": {
                "OrderNumber": {
                    "description": "Indicates the order in which this StudyEndPointRef appears in Metadata displays or data entry applications.",
                    "type": "integer"
                },
                "StudyEndPointOID": {
                    "description": "Reference to the StudyEndPoint .",
                    "type": "string"
                }
            },
            "required": [
                "StudyEndPointOID"
            ],
            "title": "StudyEndPointRef",
            "type": "object"
        },
        "StudyEndPointType": {
            "description": "Enumeration used in Type",
            "enum": [
                "Simple",
                "Humane",
                "Surrogate",
                "Composite"
            ],
            "title": "StudyEndPointType",
            "type": "string"
        },
        "StudyEndPoints": {
            "additionalProperties": false,
            "description": "Go to start of metadata",
            "properties": {
                "StudyEndPointRefRef": {
                    "description": "StudyEndPointRef reference: Go to start of metadata",
                    "items": {
                        "$ref": "#/$defs/StudyEndPoint"
                    },
                    "type": "array"
                }
            },
            "title": "StudyEndPoints",
            "type": "object"
        },
        "StudyEstimand": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "IntercurrentEventRef": {
                    "description": "IntercurrentEvent reference: None",
                    "items": {
                        "$ref": "#/$defs/IntercurrentEvent"
                    },
                    "type": "array"
                },
                "Level": {
                    "$ref": "#/$defs/StudyEstimandLevel",
                    "description": "Defined Level for the Study Estimand"
                },
                "Name": {
                    "description": "Human readable name for the Study Estimand.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier for the StudyEstimand element.",
                    "type": "string"
                },
                "StudyEndPointRefRef": {
                    "$ref": "#/$defs/StudyEndPointRef",
                    "description": "StudyEndPointRef reference: Go to start of metadata"
                },
                "StudyInterventionRefRef": {
                    "$ref": "#/$defs/StudyInterventionRef",
                    "description": "StudyInterventionRef reference: None"
                },
                "StudyTargetPopulationRefRef": {
                    "$ref": "#/$defs/StudyTargetPopulationRef",
                    "description": "StudyTargetPopulationRef reference: None"
                },
                "SummaryMeasureRef": {
                    "$ref": "#/$defs/SummaryMeasure",
                    "description": "SummaryMeasure reference: None"
                }
            },
            "required": [
                "OID",
                "Name"
            ],
            "title": "StudyEstimand",
            "type": "object"
        },
        "StudyEstimandLevel": {
            "description": "Enumeration used in Level",
            "enum": [
                "Primary",
                "Secondary",
                "Exploratory"
            ],
            "title": "StudyEstimandLevel",
            "type": "string"
        },
        "StudyEstimands": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "StudyEstimandRef": {
                    "description": "StudyEstimand reference: None",
                    "items": {
                        "$ref": "#/$defs/StudyEstimand"
                    },
                    "type": "array"
                }
            },
            "title": "StudyEstimands",
            "type": "object"
        },
        "StudyEventData": {
            "additionalProperties": false,
            "description": "Clinical data for a study event (visit). The model supports repeating study events (e.g., when the same set of information is collected for a series of patient visits).",
            "properties": {
                "AnnotationRef": {
                    "description": "Annotation reference: A general note about clinical data. If an annotation has both a comment and flags, the flags should be related to the comment.",
                    "type": "string"
                },
                "AuditRecordRef": {
                    "$ref": "#/$defs/AuditRecord",
                    "description": "AuditRecord reference: An AuditRecord carries information pertaining to the creation, deletion, or modification of clinical data. This information includes who performed that action, and where, when, and why that action was performed.AuditRecord information describes a change to clinical data, but is not itself clinical data. The value of some clinical data can always be changed by a subsequent transaction, but history cannot be changed, only added to."
                },
                "ItemGroupDataRef": {
                    "description": "ItemGroupData reference: Clinical data corresponding to an ItemGroupRef defined in the active MetaDataVersion.",
                    "items": {
                        "$ref": "#/$defs/ItemGroupData"
                    },
                    "type": "array"
                },
                "QueryRef": {
                    "description": "Query reference: The Query element represents a request for clarification on a data item collected for a clinical trial, specifically a request from a sponsor or sponsor\u2019s representative to an investigator to resolve an error or inconsistency discovered during data review. Queries can be created manually by individuals such as site monitors or data managers or automatically by systems. The full text of the Query exists in the Value child element. The optional Name attribute provide the means to provide a short identifier that can be included in listing or user interfaces.",
                    "items": {
                        "$ref": "#/$defs/Query"
                    },
                    "type": "array"
                },
                "SignatureRefRef": {
                    "description": "SignatureRef reference: None",
                    "type": "string"
                },
                "StudyEventOID": {
                    "description": "Reference to the StudyEventDef . The StudyEventOID and StudyEventRepeatKey are used together to identify a particular study event. This pair of values uniquely identifies a StudyEvent within the containing subject. The StudyEventRepeatKey is present if and only if the StudyEventDef is repeating.",
                    "type": "string"
                },
                "StudyEventRepeatKey": {
                    "description": "A key used to distinguish between repeats of the same type of study event for a single subject.",
                    "type": "string"
                },
                "TransactionTypeRef": {
                    "$ref": "#/$defs/TransactionType",
                    "description": "Identifies the transaction type when /ODM/@FileType is Transactional and there is no child element."
                }
            },
            "required": [
                "StudyEventOID"
            ],
            "title": "StudyEventData",
            "type": "object"
        },
        "StudyEventDef": {
            "additionalProperties": false,
            "description": "StudyEventDef represents the definition of an activity in a study where data is collected. For example, a study event may represent a set of item groups that represent data collection instruments to be completed for a subject during a visit in a study. The visit occurs as part of a study workflow, and the workflow is referenced in the study event.",
            "properties": {
                "AliasRef": {
                    "description": "Alias reference: An Alias provides an additional name for an element. The Context attribute specifies the application domain in which this additional name is relevant.",
                    "items": {
                        "$ref": "#/$defs/Alias"
                    },
                    "type": "array"
                },
                "Category": {
                    "description": "The Category attribute is typically used to indicate the study phase appropriate to this type of study event. Examples might include screening, pretreatment, treatment, and follow-up.",
                    "type": "string"
                },
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "CommentOID": {
                    "description": "Reference to a sponsor comment or external document relevant to this StudyEvent definition.",
                    "type": "string"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "ItemGroupRefRef": {
                    "description": "ItemGroupRef reference: ItemGroupRef references an ItemGroupDef as it occurs within a specific StudyEventDef or ItemGroupDef. The list of ItemGroupRefs identifies the types of item groups that are allowed to occur within this type of studyevent or (nested) item group. The ItemGroupRefs within a single StudyEventDef or ItemGroupDef must not have duplicate ItemGroupOID or OrderNumber attribute values.",
                    "items": {
                        "$ref": "#/$defs/ItemGroupRef"
                    },
                    "type": "array"
                },
                "Name": {
                    "description": "Human readable-name for the study event.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier for the StudyEventDef element.",
                    "type": "string"
                },
                "Repeating": {
                    "$ref": "#/$defs/YesOrNo",
                    "description": "The Repeating flag indicates when this type of study event can occur repeatedly within any given subject. When Repeating is \"Yes\" multiple instances of StudyEventData for this StudyEventDef may be collected for a study subject."
                },
                "Type": {
                    "$ref": "#/$defs/EventType",
                    "description": "Specifies the StudyEvent Type. The study protocol document usually specifies the planned set of study subject encounters, as follows: Scheduled - StudyEvent is a planned study event Unscheduled - Unplanned study event (for example an unexpected adverse event that occurs between planned visits. Common - A set of study activities that occur for as part of all subject encounters within a study."
                },
                "WorkflowRefRef": {
                    "$ref": "#/$defs/WorkflowRef",
                    "description": "WorkflowRef reference: The WorkflowRef references a workflow definition"
                }
            },
            "required": [
                "OID",
                "Name",
                "Repeating",
                "Type"
            ],
            "title": "StudyEventDef",
            "type": "object"
        },
        "StudyEventGroupDef": {
            "additionalProperties": false,
            "description": "StudyEventGroupDef is a study building block that groups a number of smaller building blocks, which can themselves be StudyEventGroups or StudyEvents. It thus allows nesting of building blocks.",
            "properties": {
                "ArmOID": {
                    "description": "Reference to an Arm element defined in the study.",
                    "type": "string"
                },
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "CommentOID": {
                    "description": "Reference to a CommentDef element defined in the study.",
                    "type": "string"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "EpochOID": {
                    "description": "Reference to an Epoch element defined in the study.",
                    "type": "string"
                },
                "Name": {
                    "description": "Human readable identifier for the StudyEventGroupDef element.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier for the StudyEventGroupDef element.",
                    "type": "string"
                },
                "StudyEventGroupRefRef": {
                    "description": "StudyEventGroupRef reference: This element references a StudyEventGroupDef as it occurs within a specific version of a study. The list of StudyEventGroupRefs identifies the types of study group events that are allowed to occur within the study.",
                    "items": {
                        "$ref": "#/$defs/StudyEventGroupRef"
                    },
                    "type": "array"
                },
                "StudyEventRefRef": {
                    "description": "StudyEventRef reference: This element references a StudyEventDef as it occurs within a specific version of a study. The list of StudyEventRefs identifies the types of study events that are allowed to occur within the study.",
                    "items": {
                        "$ref": "#/$defs/StudyEventRef"
                    },
                    "type": "array"
                },
                "WorkflowRefRef": {
                    "$ref": "#/$defs/WorkflowRef",
                    "description": "WorkflowRef reference: The WorkflowRef references a workflow definition"
                }
            },
            "required": [
                "OID",
                "Name"
            ],
            "title": "StudyEventGroupDef",
            "type": "object"
        },
        "StudyEventGroupRef": {
            "additionalProperties": false,
            "description": "This element references a StudyEventGroupDef as it occurs within a specific version of a study. The list of StudyEventGroupRefs identifies the types of study group events that are allowed to occur within the study.",
            "properties": {
                "CollectionExceptionConditionOID": {
                    "description": "Reference to a ConditionDef",
                    "type": "string"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "Mandatory": {
                    "$ref": "#/$defs/YesOrNo",
                    "description": "Indicator of whether this StudyEventGroup must appear in the study clinical data for each subject per the study protocol."
                },
                "OrderNumber": {
                    "description": "Indicates the order in which this StudyEventGroup appears in Metadata displays or data entry applications.",
                    "type": "integer"
                },
                "StudyEventGroupOID": {
                    "description": "Reference to the StudyEventGroupDef .",
                    "type": "string"
                }
            },
            "required": [
                "StudyEventGroupOID",
                "Mandatory"
            ],
            "title": "StudyEventGroupRef",
            "type": "object"
        },
        "StudyEventRef": {
            "additionalProperties": false,
            "description": "This element references a StudyEventDef as it occurs within a specific version of a study. The list of StudyEventRefs identifies the types of study events that are allowed to occur within the study.",
            "properties": {
                "CollectionExceptionConditionOID": {
                    "description": "Reference to a ConditionDef If the CollectionExceptionConditionOID attribute is provided, it references a ConditionDef that describes the circumstances under which data for this study event should not be collected.",
                    "type": "string"
                },
                "Mandatory": {
                    "$ref": "#/$defs/YesOrNo",
                    "description": "The Mandatory flag indicates that the clinical data for the containing MetaDataVersion would be incomplete without an instance of this type of Study Event for each subject per the study protocol. ODM clinical data files that are incomplete in this sense may be considered incomplete for study review and analysis purposes."
                },
                "OrderNumber": {
                    "description": "Indicates the order in which this StudyEventDef appears in Metadata displays or data entry applications. OrderNumbers provide an ordering on the StudyEventDefs for use whenever a list of StudyEventDefs is presented to a user. They do not imply anything about event scheduling, time ordering, or data correctness. Order of execution and timing between study events and groups of study events must be defined in WorkflowDef elements. Scheduling will be realized in StudyTiming and its child elements that reference StudyEventGroups.",
                    "type": "integer"
                },
                "StudyEventOID": {
                    "description": "Reference to the StudyEventDef .",
                    "type": "string"
                }
            },
            "required": [
                "StudyEventOID",
                "Mandatory"
            ],
            "title": "StudyEventRef",
            "type": "object"
        },
        "StudyIndication": {
            "additionalProperties": false,
            "description": "This element describes a study indication (e.g., condition, disease) for the clinical study. The human-readable description is provided in the Description element. The Coding element can be used to provide a machine-readable code for the indication (e.g., SNOMED-CT code 26929004 for \"Alzheimer's disease\").",
            "properties": {
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "OID": {
                    "description": "Unique identifier of the version within the XML document.",
                    "type": "string"
                }
            },
            "required": [
                "OID"
            ],
            "title": "StudyIndication",
            "type": "object"
        },
        "StudyIndications": {
            "additionalProperties": false,
            "description": "StudyIndications is a container element for individual StudyIndication elements.",
            "properties": {
                "StudyIndicationRef": {
                    "description": "StudyIndication reference: This element describes a study indication (e.g., condition, disease) for the clinical study. The human-readable description is provided in the Description element. The Coding element can be used to provide a machine-readable code for the indication (e.g., SNOMED-CT code 26929004 for \"Alzheimer's disease\").",
                    "items": {
                        "$ref": "#/$defs/StudyIndication"
                    },
                    "type": "array"
                }
            },
            "title": "StudyIndications",
            "type": "object"
        },
        "StudyIntervention": {
            "additionalProperties": false,
            "description": "This element describes a study intervention (e.g., medication, treatment, therapy) for the clinical study. The human-readable description is provided in the Description element. The Coding element can be used to provide a machine-readable code for the indication (e.g., ATC M01AE01 code for \"Ibuprofen\" when used as a nonsteroidal anti-inflammatory drug).",
            "properties": {
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "OID": {
                    "description": "Unique identifier of the version within the XML document.",
                    "type": "string"
                }
            },
            "required": [
                "OID"
            ],
            "title": "StudyIntervention",
            "type": "object"
        },
        "StudyInterventionRef": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "StudyInterventionOID": {
                    "description": "Reference to a StudyIntervention",
                    "type": "string"
                }
            },
            "required": [
                "StudyInterventionOID"
            ],
            "title": "StudyInterventionRef",
            "type": "object"
        },
        "StudyInterventions": {
            "additionalProperties": false,
            "description": "The StudyInterventions element is a container element for individual StudyIntervention elements.",
            "properties": {
                "StudyInterventionRefRef": {
                    "description": "StudyInterventionRef reference: None",
                    "items": {
                        "$ref": "#/$defs/StudyIntervention"
                    },
                    "type": "array"
                }
            },
            "title": "StudyInterventions",
            "type": "object"
        },
        "StudyObjective": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "Level": {
                    "$ref": "#/$defs/StudyObjectiveLevel",
                    "description": "Defined level for the Study Objective"
                },
                "Name": {
                    "description": "Name of the study objective",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier for the StudyObjective element.",
                    "type": "string"
                },
                "StudyEndPointRefRef": {
                    "description": "StudyEndPointRef reference: Go to start of metadata",
                    "items": {
                        "$ref": "#/$defs/StudyEndPointRef"
                    },
                    "type": "array"
                }
            },
            "required": [
                "OID",
                "Name"
            ],
            "title": "StudyObjective",
            "type": "object"
        },
        "StudyObjectiveLevel": {
            "description": "Enumeration used in Level",
            "enum": [
                "Primary",
                "Secondary",
                "Exploratory"
            ],
            "title": "StudyObjectiveLevel",
            "type": "string"
        },
        "StudyObjectives": {
            "additionalProperties": false,
            "description": "The StudyObjectives is a container element for individual StudyObjective elements.",
            "properties": {
                "StudyObjectiveRef": {
                    "description": "StudyObjective reference: None",
                    "items": {
                        "$ref": "#/$defs/StudyObjective"
                    },
                    "type": "array"
                }
            },
            "title": "StudyObjectives",
            "type": "object"
        },
        "StudyParameter": {
            "additionalProperties": false,
            "description": "A StudyParameter defines a study design parameter for which the value or values are delivered in the ParameterValue child element or elements.",
            "properties": {
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "OID": {
                    "description": "Unique identifier for StudyParameter. Note a StudyParameter can be referenced from other elements.",
                    "type": "string"
                },
                "ParameterValueRef": {
                    "$ref": "#/$defs/ParameterValue",
                    "description": "ParameterValue reference: This element contains the value of the study parameter as text content."
                },
                "ShortName": {
                    "description": "Short name or code for the parameter.",
                    "type": "string"
                },
                "Term": {
                    "description": "Longer name. Provides the full name of the parameter.",
                    "type": "string"
                }
            },
            "required": [
                "OID",
                "Term"
            ],
            "title": "StudyParameter",
            "type": "object"
        },
        "StudyStructure": {
            "additionalProperties": false,
            "description": "The StudyStructure element describes the general structure of a clinical study with arms, epochs, and workflows.",
            "properties": {
                "ArmRef": {
                    "description": "Arm reference: An Arm element provides the declaration of a study arm. Arms do not have any ordering relative to one another.",
                    "items": {
                        "$ref": "#/$defs/Arm"
                    },
                    "type": "array"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "EpochRef": {
                    "description": "Epoch reference: The planned period of subjects' participation in the trial is divided into sequential epochs. Each epoch is a period of time that serves a purpose in the trial as a whole. Epochs cannot overlap. The sequence of the epoch in the study is provided by the SequenceNumber attribute, the first epoch in the study being assigned the sequence number 1. Sequence numbers are subsequent.",
                    "items": {
                        "$ref": "#/$defs/Epoch"
                    },
                    "type": "array"
                },
                "WorkflowRefRef": {
                    "$ref": "#/$defs/WorkflowRef",
                    "description": "WorkflowRef reference: The WorkflowRef references a workflow definition"
                }
            },
            "title": "StudyStructure",
            "type": "object"
        },
        "StudySummary": {
            "additionalProperties": false,
            "description": "The StudyParameter element allows to provide a set of study design parameters such as anticipated number of subjects, minimum and maximum age of the participants, or planned number of arms.",
            "properties": {
                "StudyParameterRef": {
                    "description": "StudyParameter reference: A StudyParameter defines a study design parameter for which the value or values are delivered in the ParameterValue child element or elements.",
                    "items": {
                        "$ref": "#/$defs/StudyParameter"
                    },
                    "type": "array"
                }
            },
            "title": "StudySummary",
            "type": "object"
        },
        "StudyTargetPopulation": {
            "additionalProperties": false,
            "description": "The StudyTargetPopulation describes the population targeted for the clinical study.",
            "properties": {
                "CodingRef": {
                    "description": "Coding reference: Coding references a symbol from a defined code system. It uses a code defined in a terminology system to associate semantics with a given term, codelist, variable, or group of variables. The presence of a Coding element associates a meaning to its parent element. Including multiple Coding elements for a given parent indicates synonymous meanings provided by different code systems or code system versions.",
                    "items": {
                        "$ref": "#/$defs/Coding"
                    },
                    "type": "array"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "FormalExpressionRef": {
                    "description": "FormalExpression reference: A FormalExpression used within a ConditionDef or a RangeCheck must evaluate to True or False. A FormalExpression referenced within a MethodDef having Type Imputation, Computation, or Transpose must evaluate to the correct DataType for an Item that may be imputed or computed using the Method. A FormalExpression gets parameter and return value definitions from the MethodSignature element. The data types in the MethodSignature parameters and return values must match the corresponding data types in the FormalExpression.",
                    "items": {
                        "$ref": "#/$defs/FormalExpression"
                    },
                    "type": "array"
                },
                "Name": {
                    "description": "Human readable name for the StudyTargetPopulation.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier for the StudyTargetPopulation element.",
                    "type": "string"
                }
            },
            "required": [
                "OID",
                "Name"
            ],
            "title": "StudyTargetPopulation",
            "type": "object"
        },
        "StudyTargetPopulationRef": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "StudyTargetPopulationOID": {
                    "type": "string"
                }
            },
            "required": [
                "StudyTargetPopulationOID"
            ],
            "title": "StudyTargetPopulationRef",
            "type": "object"
        },
        "StudyTiming": {
            "additionalProperties": false,
            "description": "The StudyTiming element defines a timing constraint within the study, which can be an absolute timing constraint (e.g., start of the screening visit must be between 1 January 2022 and 31 December 2022), a relative timing constraint (e.g., visit 2 must be within 30 days after visit 1 with a window of +/- 1 week), a transition timing constraint (i.e., timing constraint on a transition within a defined workflow), or a duration timing constraint (e.g., the duration of visit 2 is planned to take hours with a window of 30 minutes).",
            "properties": {
                "AbsoluteTimingConstraintRef": {
                    "description": "AbsoluteTimingConstraint reference: The element AbsoluteTimingConstraint is used to specify when an activity, represented by either a StudyEventGroup or StudyEvent, can take place.",
                    "items": {
                        "$ref": "#/$defs/AbsoluteTimingConstraint"
                    },
                    "type": "array"
                },
                "DurationTimingConstraintRef": {
                    "description": "DurationTimingConstraint reference: The DurationTimingConstraint constrains the duration of an activity represented by a study, epoch, StudyEventGroupDef, StudyEventDef, ItemGroupDef, or ItemDef. It is used to constrain the duration of the visit, activity, or any other structural element.",
                    "items": {
                        "$ref": "#/$defs/DurationTimingConstraint"
                    },
                    "type": "array"
                },
                "Name": {
                    "description": "Human readable identifier for a StudyTiming element.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier for a StudyTiming element.",
                    "type": "string"
                },
                "RelativeTimingConstraintRef": {
                    "description": "RelativeTimingConstraint reference: The RelativeTimingConstraint element describes a relative timing constraint between 2 activities or groups of activities, represented by StudyEventGroups, StudyEvents, ItemGroups, or Items.",
                    "items": {
                        "$ref": "#/$defs/RelativeTimingConstraint"
                    },
                    "type": "array"
                },
                "TransitionTimingConstraintRef": {
                    "description": "TransitionTimingConstraint reference: The TransitionTimingConstraint element defines a timing constraint on a transition between structural elements as defined in a workflow. As such, it is a non-blocking constraint. This means that the transition is set on hold as long as the timing condition is not fulfilled, and is executed as soon as the timing condition is fulfilled.",
                    "items": {
                        "$ref": "#/$defs/TransitionTimingConstraint"
                    },
                    "type": "array"
                }
            },
            "required": [
                "OID",
                "Name"
            ],
            "title": "StudyTiming",
            "type": "object"
        },
        "StudyTimings": {
            "additionalProperties": false,
            "description": "The StudyTimings element is a container element for individual StudyTiming elements.",
            "properties": {
                "StudyTimingRef": {
                    "description": "StudyTiming reference: The StudyTiming element defines a timing constraint within the study, which can be an absolute timing constraint (e.g., start of the screening visit must be between 1 January 2022 and 31 December 2022), a relative timing constraint (e.g., visit 2 must be within 30 days after visit 1 with a window of +/- 1 week), a transition timing constraint (i.e., timing constraint on a transition within a defined workflow), or a duration timing constraint (e.g., the duration of visit 2 is planned to take hours with a window of 30 minutes).",
                    "items": {
                        "$ref": "#/$defs/StudyTiming"
                    },
                    "type": "array"
                }
            },
            "title": "StudyTimings",
            "type": "object"
        },
        "SubClass": {
            "additionalProperties": false,
            "description": "This element contains SubClass definitions.",
            "properties": {
                "Name": {
                    "$ref": "#/$defs/ItemGroupSubClass",
                    "description": "Name of the SubClass"
                },
                "ParentClass": {
                    "description": "For a nested or multilevel SubClass, the ParentClass attribute is used to define the hierarchy.",
                    "type": "string"
                }
            },
            "required": [
                "Name"
            ],
            "title": "SubClass",
            "type": "object"
        },
        "SubjectData": {
            "additionalProperties": false,
            "description": "Clinical data for a single subject.",
            "properties": {
                "AnnotationRef": {
                    "description": "Annotation reference: A general note about clinical data. If an annotation has both a comment and flags, the flags should be related to the comment.",
                    "type": "string"
                },
                "AuditRecordRef": {
                    "$ref": "#/$defs/AuditRecord",
                    "description": "AuditRecord reference: An AuditRecord carries information pertaining to the creation, deletion, or modification of clinical data. This information includes who performed that action, and where, when, and why that action was performed.AuditRecord information describes a change to clinical data, but is not itself clinical data. The value of some clinical data can always be changed by a subsequent transaction, but history cannot be changed, only added to."
                },
                "InvestigatorRefRef": {
                    "$ref": "#/$defs/InvestigatorRef",
                    "description": "InvestigatorRef reference: Provides a reference to the user who created the SubjectData record in the source system."
                },
                "QueryRef": {
                    "description": "Query reference: The Query element represents a request for clarification on a data item collected for a clinical trial, specifically a request from a sponsor or sponsor\u2019s representative to an investigator to resolve an error or inconsistency discovered during data review. Queries can be created manually by individuals such as site monitors or data managers or automatically by systems. The full text of the Query exists in the Value child element. The optional Name attribute provide the means to provide a short identifier that can be included in listing or user interfaces.",
                    "items": {
                        "$ref": "#/$defs/Query"
                    },
                    "type": "array"
                },
                "SignatureRefRef": {
                    "description": "SignatureRef reference: None",
                    "type": "string"
                },
                "SiteRefRef": {
                    "$ref": "#/$defs/SiteRef",
                    "description": "SiteRef reference: lement NameSiteRefParent ElementsSubjectDataElement XPath(s)/ODM/ClinicalData/SubjectData/SiteRefElement Textual ValueNoneAttributesLocationOIDChild ElementsNoneUsage/Business RulesBusiness Rule(s):Must be provided when the /ODM/FileType is Transactional."
                },
                "StudyEventDataRef": {
                    "description": "StudyEventData reference: Clinical data for a study event (visit). The model supports repeating study events (e.g., when the same set of information is collected for a series of patient visits).",
                    "items": {
                        "$ref": "#/$defs/StudyEventData"
                    },
                    "type": "array"
                },
                "SubjectKey": {
                    "description": "Unique identifier for the Subject.",
                    "type": "string"
                },
                "TransactionTypeRef": {
                    "$ref": "#/$defs/TransactionType",
                    "description": "Identifies the transaction type when /ODM/@FileType is Transactional and there is no child element."
                }
            },
            "required": [
                "SubjectKey"
            ],
            "title": "SubjectData",
            "type": "object"
        },
        "Suffix": {
            "additionalProperties": false,
            "description": "This element may include credentials, or suffixes (e.g., Jr., III).",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "Suffix",
            "type": "object"
        },
        "SummaryMeasure": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                }
            },
            "title": "SummaryMeasure",
            "type": "object"
        },
        "SupplementalDoc": {
            "additionalProperties": false,
            "description": "Supplemental data definitions",
            "properties": {
                "DocumentRefRef": {
                    "description": "Links to a leaf element with the location of the document.",
                    "items": {
                        "$ref": "#/$defs/DocumentRef"
                    },
                    "type": "array"
                }
            },
            "title": "SupplementalDoc",
            "type": "object"
        },
        "TargetTransition": {
            "additionalProperties": false,
            "description": "Provides a reference to a Transition element.",
            "properties": {
                "ConditionOID": {
                    "description": "Reference to a ConditionDef defining the condition under which the transition must be executed",
                    "type": "string"
                },
                "TargetTransitionOID": {
                    "description": "Reference to the Transition that is one of the targets of the branching.",
                    "type": "string"
                }
            },
            "required": [
                "TargetTransitionOID"
            ],
            "title": "TargetTransition",
            "type": "object"
        },
        "Telecom": {
            "additionalProperties": false,
            "description": "The telecommunication contacts points of a user, a location, or an organization. The Type attribute designates the type of contact.",
            "properties": {
                "TelecomType": {
                    "$ref": "#/$defs/TelecomTypeType"
                },
                "ValueRef": {
                    "description": "Human-readable designation of the trial phase.",
                    "type": "string"
                }
            },
            "required": [
                "TelecomType",
                "ValueRef"
            ],
            "title": "Telecom",
            "type": "object"
        },
        "TelecomTypeType": {
            "description": "Enumeration used in TelecomType",
            "enum": [
                "Email",
                "Pager",
                "Phone",
                "Fax",
                "SMS",
                "URL",
                "Other"
            ],
            "title": "TelecomTypeType",
            "type": "string"
        },
        "TransactionType": {
            "description": "Enumeration used in TransactionTypeRef",
            "enum": [
                "Insert",
                "Update",
                "Remove",
                "Upsert",
                "Context"
            ],
            "title": "TransactionType",
            "type": "string"
        },
        "Transition": {
            "additionalProperties": false,
            "description": "A Transition defines a link between 2 structural elements in a workflow. When the execution of the transition is dependent upon a timing constraint that is either directly defined or calculated, a TransitionTimingConstraint must be defined, referencing the current Transition.",
            "properties": {
                "EndConditionOID": {
                    "description": "The EndConditionOID references a ConditionDef defining the condition under which the transition can be completed. As long as the condition is not met, the transition to the next actitivity or event must be considered to be temporary blocked. When the target structural element can be considered to be a \"visit,\" the condition can be regarded as a visit entry criterion.",
                    "type": "string"
                },
                "Name": {
                    "description": "Human readable name for the transition between two structural elements in a WorkflowDef element.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier for the Transition element.",
                    "type": "string"
                },
                "SourceOID": {
                    "description": "References the definition of the source structural element for the transition. The structural element may be a StudyEventGroupDef, StudyEventDef, ItemGroupDef, ItemDef, or Branching element.",
                    "type": "string"
                },
                "StartConditionOID": {
                    "description": "The StartConditionOID references a ConditionDef specifying a condition that must be met for the transition to start. For example, if the source structural element is a StudyEventGroupDef describing the activities for study screening and the target structural element is a StudyEventGroupDef describing study enrollment, the ConditionDef referenced by the StartConditionOID specifies the criteria that must be met for a subject to transition from screening to enrollment.",
                    "type": "string"
                },
                "TargetOID": {
                    "description": "References the definition of the target structural element for the transition. The structural element may be a StudyEventGroupDef, StudyEventDef, ItemGroupDef, ItemDef, or Branching element. The latter will be used when there is a branching definition necessary as a result of the transition.",
                    "type": "string"
                }
            },
            "required": [
                "OID",
                "Name",
                "SourceOID",
                "TargetOID"
            ],
            "title": "Transition",
            "type": "object"
        },
        "TransitionTimingConstraint": {
            "additionalProperties": false,
            "description": "The TransitionTimingConstraint element defines a timing constraint on a transition between structural elements as defined in a workflow. As such, it is a non-blocking constraint. This means that the transition is set on hold as long as the timing condition is not fulfilled, and is executed as soon as the timing condition is fulfilled.",
            "properties": {
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "MethodOID": {
                    "description": "R eferences a MethodDef that returns a durationDatetime. Use of a method allows timings that depend on other pieces of information, or complex timing calculations.",
                    "type": "string"
                },
                "Name": {
                    "description": "Human-readable name.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier.",
                    "type": "string"
                },
                "TimepointPostWindow": {
                    "description": "Specifies the amount of time after the TimepointTarget, the time between the two activities, may be lengthened.",
                    "type": "string"
                },
                "TimepointPreWindow": {
                    "description": "Specifies the amount of time prior to the TimepointTarget, the time between the two activities, may be shortened.",
                    "type": "string"
                },
                "TimepointTarget": {
                    "description": "The planned time between the 2 activities defined by the transition in the workflow.",
                    "type": "string"
                },
                "TransitionOID": {
                    "description": "References the workflow Transition on which the timing constraint must be executed.",
                    "type": "string"
                },
                "Type": {
                    "$ref": "#/$defs/RelativeTimingConstraintType",
                    "description": "Defines how the timing is to be defined between the two activities, starting from the start or the end of the source activity, and ending at the start or the end of the target activity."
                }
            },
            "required": [
                "OID",
                "Name",
                "TransitionOID",
                "TimepointTarget"
            ],
            "title": "TransitionTimingConstraint",
            "type": "object"
        },
        "TranslatedText": {
            "additionalProperties": false,
            "description": "Human-readable text that is appropriate for a particular language. TranslatedText elements typically occur in a series, presenting a set of alternative textual renditions for different languages and types.",
            "properties": {
                "Type": {
                    "description": "Contains IANA media type of the TranslatedText element contents.",
                    "type": "string"
                },
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                },
                "_language": {
                    "description": "Code representing the language of the enclosed text value. Default value depends on locale. Note: The xml:lang attribute is part of the XML standard. See IETF Trust, Tags for Identifying Languages",
                    "type": "string"
                }
            },
            "required": [
                "Type"
            ],
            "title": "TranslatedText",
            "type": "object"
        },
        "TrialPhase": {
            "additionalProperties": false,
            "description": "The TrialPhase element designates the phase of the study in the clinical trial.",
            "properties": {
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "ValueRef": {
                    "description": "Human-readable designation of the trial phase.",
                    "type": "string"
                }
            },
            "required": [
                "ValueRef"
            ],
            "title": "TrialPhase",
            "type": "object"
        },
        "TrialPhaseTypeEnum": {
            "description": "",
            "enum": [
                "NOT APPLICABLE",
                "PHASE 0 TRIAL",
                "PHASE I TRIAL",
                "PHASE I/II TRIAL",
                "PHASE II TRIAL",
                "PHASE II/III TRIAL",
                "PHASE IIA TRIAL",
                "PHASE IIB TRIAL",
                "PHASE III TRIAL",
                "PHASE IIIA TRIAL",
                "PHASE IIIB TRIAL",
                "PHASE IV TRIAL",
                "PHASE V TRIAL"
            ],
            "title": "TrialPhaseTypeEnum",
            "type": "string"
        },
        "User": {
            "additionalProperties": false,
            "description": "Information about a specific user of a clinical data collection or data management system.",
            "properties": {
                "AddressRef": {
                    "description": "Address reference: The postal address for a user, location, or organization.",
                    "items": {
                        "$ref": "#/$defs/Address"
                    },
                    "type": "array"
                },
                "FamilyNameRef": {
                    "$ref": "#/$defs/FamilyName",
                    "description": "FamilyName reference: The user's surname (family name)."
                },
                "FullNameRef": {
                    "$ref": "#/$defs/FullName",
                    "description": "FullName reference: The user's full formal name. May be a combination of Prefix, GivenName, FamilyName & Suffix. Intended to be used for display."
                },
                "GivenNameRef": {
                    "$ref": "#/$defs/GivenName",
                    "description": "GivenName reference: The user's initial given name or all given names."
                },
                "ImageRef": {
                    "$ref": "#/$defs/Image",
                    "description": "Image reference: A visual depiction of the user."
                },
                "LocationOID": {
                    "description": "Reference to a Location element.",
                    "type": "string"
                },
                "OID": {
                    "description": "Business Rules",
                    "type": "string"
                },
                "OrganizationOID": {
                    "description": "Reference to an Organization elment.",
                    "type": "string"
                },
                "PrefixRef": {
                    "$ref": "#/$defs/Prefix",
                    "description": "Prefix reference: Title or other prefix. Maps to FHIR HumanName.prefix (https://www.hl7.org/fhir/datatypes.html#humanname)."
                },
                "SuffixRef": {
                    "$ref": "#/$defs/Suffix",
                    "description": "Suffix reference: This element may include credentials, or suffixes (e.g., Jr., III)."
                },
                "TelecomRef": {
                    "description": "Telecom reference: The telecommunication contacts points of a user, a location, or an organization. The Type attribute designates the type of contact.",
                    "items": {
                        "$ref": "#/$defs/Telecom"
                    },
                    "type": "array"
                },
                "UserNameRef": {
                    "$ref": "#/$defs/UserName",
                    "description": "UserName reference: The user's login identification in the sender's system."
                },
                "UserTypeRef": {
                    "$ref": "#/$defs/UserType",
                    "description": "User's role in the study."
                }
            },
            "required": [
                "OID"
            ],
            "title": "User",
            "type": "object"
        },
        "UserName": {
            "additionalProperties": false,
            "description": "The user's login identification in the sender's system.",
            "properties": {
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "UserName",
            "type": "object"
        },
        "UserRef": {
            "additionalProperties": false,
            "description": "",
            "properties": {
                "UserOID": {
                    "description": "Reference to the User definition.",
                    "type": "string"
                }
            },
            "required": [
                "UserOID"
            ],
            "title": "UserRef",
            "type": "object"
        },
        "UserType": {
            "description": "Enumeration used in UserTypeRef",
            "enum": [
                "Sponsor",
                "Investigator",
                "Lab",
                "Other",
                "Subject",
                "Monitor",
                "Data analyst",
                "Care provider",
                "Assessor"
            ],
            "title": "UserType",
            "type": "string"
        },
        "Value": {
            "additionalProperties": false,
            "description": "The data collected for an item. This data is represented according to DataType attribute of the ItemDef referenced by the ItemOID attribute in the parent ItemData element.",
            "properties": {
                "SeqNum": {
                    "description": "When more than 1 Value element exists this attribute uniquely identifies each Value and defines the order of a Value in a list of Values.",
                    "type": "integer"
                },
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "title": "Value",
            "type": "object"
        },
        "ValueListDef": {
            "additionalProperties": false,
            "description": "The following table specifies the XML structure for valuelist metadata. The ValueListDef element contains ItemRef elements that reference ItemDef elements that provide the value-level metadata details",
            "properties": {
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description of the value list."
                },
                "ItemRefRef": {
                    "description": "The ItemRef element contains the reference to the value attributes definitions.",
                    "items": {
                        "$ref": "#/$defs/ItemRef"
                    },
                    "type": "array"
                },
                "OID": {
                    "description": "Unique ID for the Value List See Section 2.13, Element Identifiers and References , for OID considerations.",
                    "type": "string"
                }
            },
            "required": [
                "OID"
            ],
            "title": "ValueListDef",
            "type": "object"
        },
        "ValueListRef": {
            "additionalProperties": false,
            "description": "The ValueListRef element is the OID of the ValueListDef that contains the valuelist definition associated with the variable. If value-level metadata is required for a variable, a ValueListRef element should be provided as a child element on the ItemDef for the variable definition.",
            "properties": {
                "ValueListOID": {
                    "description": "Reference to the unique ID of a ValueListDef element that provides value-level metadata.",
                    "type": "string"
                }
            },
            "required": [
                "ValueListOID"
            ],
            "title": "ValueListRef",
            "type": "object"
        },
        "WhereClauseDef": {
            "additionalProperties": false,
            "description": "The WhereClauseDef element specifies a condition.",
            "properties": {
                "CommentOID": {
                    "description": "Reference to the unique ID of a CommentDef that describes how to join the datasets when the WhereClause includes references to variables in different datasets.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique ID for the WhereClauseDef. See Section 2.13, Element Identifiers and References , for OID considerations.",
                    "type": "string"
                },
                "RangeCheckRef": {
                    "description": "A WhereClause element defines a condition by using one or more RangeCheck elements.",
                    "items": {
                        "$ref": "#/$defs/RangeCheck"
                    },
                    "type": "array"
                }
            },
            "required": [
                "OID"
            ],
            "title": "WhereClauseDef",
            "type": "object"
        },
        "WhereClauseRef": {
            "additionalProperties": false,
            "description": "The WhereClauseRef references the WhereClauseDef element that describes the conditions under which the variable values are defined by the referenced ItemDef.",
            "properties": {
                "WhereClauseOID": {
                    "description": "Reference to the unique ID of a WhereClauseDef element",
                    "type": "string"
                }
            },
            "required": [
                "WhereClauseOID"
            ],
            "title": "WhereClauseRef",
            "type": "object"
        },
        "WorkflowDef": {
            "additionalProperties": false,
            "description": "A WorkflowDef defines an automated workflow for a study.",
            "properties": {
                "BranchingRef": {
                    "description": "Branching reference: This element describes the branching in a workflow from a source (start) structural element to 2 or more target structural elements, over a Transition element.",
                    "items": {
                        "$ref": "#/$defs/Branching"
                    },
                    "type": "array"
                },
                "DescriptionRef": {
                    "$ref": "#/$defs/Description",
                    "description": "Description reference: A free-text description of the containing metadata component, unless restricted by Business Rules."
                },
                "Name": {
                    "description": "Human readable label for the workflow.",
                    "type": "string"
                },
                "OID": {
                    "description": "Unique identifier for the workflow.",
                    "type": "string"
                },
                "TransitionRef": {
                    "description": "Transition reference: A Transition defines a link between 2 structural elements in a workflow. When the execution of the transition is dependent upon a timing constraint that is either directly defined or calculated, a TransitionTimingConstraint must be defined, referencing the current Transition.",
                    "items": {
                        "$ref": "#/$defs/Transition"
                    },
                    "type": "array"
                },
                "WorkflowEndRef": {
                    "description": "WorkflowEnd reference: A WorkflowEnd references a structural element with which the workflows ends.",
                    "items": {
                        "$ref": "#/$defs/WorkflowEnd"
                    },
                    "type": "array"
                },
                "WorkflowStartRef": {
                    "$ref": "#/$defs/WorkflowStart",
                    "description": "WorkflowStart reference: WorkflowStart references a structural element that begins the automated workflow."
                }
            },
            "required": [
                "OID",
                "Name"
            ],
            "title": "WorkflowDef",
            "type": "object"
        },
        "WorkflowEnd": {
            "additionalProperties": false,
            "description": "A WorkflowEnd references a structural element with which the workflows ends.",
            "properties": {
                "EndOID": {
                    "description": "Reference to the definition of the structural element that ends the workflow. It may be a StudyEventGroupDef, StudyEventDef, ItemGroupDef, or ItemDef element.",
                    "type": "string"
                },
                "_content": {
                    "description": "multi-line text content from between XML tags",
                    "type": "string"
                }
            },
            "required": [
                "EndOID"
            ],
            "title": "WorkflowEnd",
            "type": "object"
        },
        "WorkflowRef": {
            "additionalProperties": false,
            "description": "The WorkflowRef references a workflow definition",
            "properties": {
                "WorkflowOID": {
                    "description": "Reference to a WorfkflowDef",
                    "type": "string"
                }
            },
            "required": [
                "WorkflowOID"
            ],
            "title": "WorkflowRef",
            "type": "object"
        },
        "WorkflowStart": {
            "additionalProperties": false,
            "description": "WorkflowStart references a structural element that begins the automated workflow.",
            "properties": {
                "StartOID": {
                    "description": "Reference to the definition of the structural element that starts the workflow. It may be a StudyEventGroupDef, StudyEventDef, ItemGroupDef, or ItemDef element.",
                    "type": "string"
                }
            },
            "required": [
                "StartOID"
            ],
            "title": "WorkflowStart",
            "type": "object"
        },
        "YesOnly": {
            "description": "Enumeration used in IsNonStandard, Other, IsNull, HasNoData, Repeat, ExtendedValue",
            "enum": [],
            "title": "YesOnly",
            "type": "string"
        },
        "YesOrNo": {
            "description": "Enumeration used in IsReferenceData, Repeating, UsedMethod, Mandatory",
            "enum": [
                "Yes",
                "No"
            ],
            "title": "YesOrNo",
            "type": "string"
        }
    },
    "$id": "http://www.cdisc.org/ns/odm/v2.0",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "additionalProperties": true,
    "metamodel_version": "1.7.0",
    "title": "odm",
    "type": "object",
    "version": null
}